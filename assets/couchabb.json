{"_attachments": {"test/qunit/index.html": {"data": "PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSxjaHJvbWU9MSI+CiAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiPgoKICA8dGl0bGU+QmFja2JvbmUgQm9pbGVycGxhdGUgUVVuaXQgVGVzdCBTdWl0ZTwvdGl0bGU+CgogIDwhLS0gUVVuaXQgc3R5bGVzIC0tPgogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0idmVuZG9yL3F1bml0LmNzcyI+CjwvaGVhZD4KCjxib2R5PgogIDwhLS0gUVVuaXQgc3R1Y3R1cmUgLS0+CiAgPGRpdiBjbGFzcz0iZGF0YXNldC10ZXN0Ij4KICAgIDxoMSBpZD0icXVuaXQtaGVhZGVyIj5CYWNrYm9uZSBCb2lsZXJwbGF0ZSBRVW5pdCBUZXN0IFN1aXRlPC9oMT4KICAgIDxoMiBpZD0icXVuaXQtYmFubmVyIj48L2gyPgogICAgPGgyIGlkPSJxdW5pdC11c2VyQWdlbnQiPjwvaDI+CiAgICA8b2wgaWQ9InF1bml0LXRlc3RzIj48L29sPgogIDwvZGl2PgoKICA8IS0tIFRlc3RpbmcgbGlicyAtLT4KICA8c2NyaXB0IHNyYz0idmVuZG9yL3F1bml0LmpzIj48L3NjcmlwdD4KCiAgPCEtLSBBcHBsaWNhdGlvbiBsaWJzIC0tPgogIDxzY3JpcHQgc3JjPSIuLi8uLi9hc3NldHMvanMvbGlicy9qcXVlcnkuanMiPjwvc2NyaXB0PgogIDxzY3JpcHQgc3JjPSIuLi8uLi9hc3NldHMvanMvbGlicy91bmRlcnNjb3JlLmpzIj48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0iLi4vLi4vYXNzZXRzL2pzL2xpYnMvYmFja2JvbmUuanMiPjwvc2NyaXB0PgogIAogIDwhLS0gTG9hZCBhcHBsaWNhdGlvbiAtLT4KICA8c2NyaXB0IGRhdGEtbWFpbj0iLi4vLi4vYXBwL2NvbmZpZyIKICAgIHNyYz0iLi4vLi4vYXNzZXRzL2pzL2xpYnMvcmVxdWlyZS5qcyI+PC9zY3JpcHQ+CgogIDwhLS0gRGVjbGFyZSB5b3VyIHRlc3QgZmlsZXMgdG8gYmUgcnVuIGhlcmUgLS0+CiAgPHNjcmlwdD4KICAgIC8vIEVuc3VyZSB5b3UgcG9pbnQgdG8gd2hlcmUgeW91ciB0ZXN0cyBhcmUsIGJhc2UgZGlyZWN0b3J5IGlzIGFwcC8sIHdoaWNoCiAgICAvLyBpcyB3aHkgLi4vdGVzdCBpcyBuZWNlc3NhcnkKICAgIHJlcXVpcmUoeyBwYXRoczogeyB0ZXN0czogIi4uL3Rlc3QvcXVuaXQvdGVzdHMiIH0gfSwgWwoKICAgICAgLy8gTG9hZCB0aGUgZXhhbXBsZSB0ZXN0cywgcmVwbGFjZSB0aGlzIGFuZCBhZGQgeW91ciBvd24gdGVzdHMKICAgICAgInRlc3RzL2V4YW1wbGUiCgogICAgXSk7CiAgPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPgo=", "content_type": "text/html"}, "assets/css/style.css": {"data": "", "content_type": "text/css"}, "test/jasmine/vendor/jasmine-html.js": {"data": "", "content_type": "application/javascript"}, "app/modules/item.js": {"data": "ZGVmaW5lKFsKICAibmFtZXNwYWNlIiwKCiAgLy8gTGlicwogICJ1c2UhYmFja2JvbmUiLAogICJ1c2UhYmFja2JvbmVfY291Y2hkYiIKCiAgLy8gTW9kdWxlcwoKICAvLyBQbHVnaW5zCl0sCgpmdW5jdGlvbihuYW1lc3BhY2UsIEJhY2tib25lKSB7CgogIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUKICB2YXIgSXRlbSA9IG5hbWVzcGFjZS5tb2R1bGUoKTsKCiAgLy8gSXRlbSBleHRlbmRpbmdzCiAgSXRlbS5Nb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7IC8qIC4uLiAqLyB9KTsKICBJdGVtLkNvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7CgkJaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7CgkJCXRoaXMucGFnZSA9IDE7CgkJfSwKCQlkYiA6IHsKCQkJdmlldzogImJ5SWQiLAoJCX0sCgkJdXJsIDogIi9pdGVtIiwKCQltb2RlbCA6IEl0ZW0KCX0pOwogIEl0ZW0uUm91dGVyID0gQmFja2JvbmUuUm91dGVyLmV4dGVuZCh7IC8qIC4uLiAqLyB9KTsKCiAgLy8gVGhpcyB3aWxsIGZldGNoIHRoZSB0dXRvcmlhbCB0ZW1wbGF0ZSBhbmQgcmVuZGVyIGl0LgogIEl0ZW0uVmlld3MuVHV0b3JpYWwgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CiAgICB0ZW1wbGF0ZTogImFwcC90ZW1wbGF0ZXMvaXRlbS5odG1sIiwKCiAgICByZW5kZXI6IGZ1bmN0aW9uKGRvbmUpIHsKICAgICAgdmFyIHZpZXcgPSB0aGlzOwoKICAgICAgLy8gRmV0Y2ggdGhlIHRlbXBsYXRlLCByZW5kZXIgaXQgdG8gdGhlIFZpZXcgZWxlbWVudCBhbmQgY2FsbCBkb25lLgogICAgICBuYW1lc3BhY2UuZmV0Y2hUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCBmdW5jdGlvbih0bXBsKSB7CiAgICAgICAgdmlldy5lbC5pbm5lckhUTUwgPSB0bXBsKCk7CgogICAgICAgIC8vIElmIGEgZG9uZSBmdW5jdGlvbiBpcyBwYXNzZWQsIGNhbGwgaXQgd2l0aCB0aGUgZWxlbWVudAogICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZG9uZSkpIHsKICAgICAgICAgIGRvbmUodmlldy5lbCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9KTsKCiAgLy8gUmVxdWlyZWQsIHJldHVybiB0aGUgbW9kdWxlIGZvciBBTUQgY29tcGxpYW5jZQogIHJldHVybiBJdGVtOwoKfSk7Cg==", "content_type": "application/javascript"}, "assets/js/plugins/text.js": {"data": "LyoKIFJlcXVpcmVKUyB0ZXh0IDEuMC42IENvcHlyaWdodCAoYykgMjAxMC0yMDExLCBUaGUgRG9qbyBGb3VuZGF0aW9uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiBBdmFpbGFibGUgdmlhIHRoZSBNSVQgb3IgbmV3IEJTRCBsaWNlbnNlLgogc2VlOiBodHRwOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcyBmb3IgZGV0YWlscwoqLwooZnVuY3Rpb24oKXt2YXIgaz1bIk1zeG1sMi5YTUxIVFRQIiwiTWljcm9zb2Z0LlhNTEhUVFAiLCJNc3htbDIuWE1MSFRUUC40LjAiXSxuPS9eXHMqPFw/eG1sKFxzKSt2ZXJzaW9uPVtcJ1wiXShcZCkqLihcZCkqW1wnXCJdKFxzKSpcPz4vaW0sbz0vPGJvZHlbXj5dKj5ccyooW1xzXFNdKylccyo8XC9ib2R5Pi9pbSxpPXR5cGVvZiBsb2NhdGlvbiE9PSJ1bmRlZmluZWQiJiZsb2NhdGlvbi5ocmVmLHA9aSYmbG9jYXRpb24ucHJvdG9jb2wmJmxvY2F0aW9uLnByb3RvY29sLnJlcGxhY2UoL1w6LywiIikscT1pJiZsb2NhdGlvbi5ob3N0bmFtZSxyPWkmJihsb2NhdGlvbi5wb3J0fHx2b2lkIDApLGo9W107ZGVmaW5lKGZ1bmN0aW9uKCl7dmFyIGcsaCxsO3R5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIiYmd2luZG93Lm5hdmlnYXRvciYmd2luZG93LmRvY3VtZW50P2g9ZnVuY3Rpb24oYSxjKXt2YXIgYj1nLmNyZWF0ZVhocigpO2Iub3BlbigiR0VUIixhLCEwKTtiLm9ucmVhZHlzdGF0ZWNoYW5nZT0KZnVuY3Rpb24oKXtiLnJlYWR5U3RhdGU9PT00JiZjKGIucmVzcG9uc2VUZXh0KX07Yi5zZW5kKG51bGwpfTp0eXBlb2YgcHJvY2VzcyE9PSJ1bmRlZmluZWQiJiZwcm9jZXNzLnZlcnNpb25zJiZwcm9jZXNzLnZlcnNpb25zLm5vZGU/KGw9cmVxdWlyZS5ub2RlUmVxdWlyZSgiZnMiKSxoPWZ1bmN0aW9uKGEsYyl7dmFyIGI9bC5yZWFkRmlsZVN5bmMoYSwidXRmOCIpO2IuaW5kZXhPZigiXHVmZWZmIik9PT0wJiYoYj1iLnN1YnN0cmluZygxKSk7YyhiKX0pOnR5cGVvZiBQYWNrYWdlcyE9PSJ1bmRlZmluZWQiJiYoaD1mdW5jdGlvbihhLGMpe3ZhciBiPW5ldyBqYXZhLmlvLkZpbGUoYSksZT1qYXZhLmxhbmcuU3lzdGVtLmdldFByb3BlcnR5KCJsaW5lLnNlcGFyYXRvciIpLGI9bmV3IGphdmEuaW8uQnVmZmVyZWRSZWFkZXIobmV3IGphdmEuaW8uSW5wdXRTdHJlYW1SZWFkZXIobmV3IGphdmEuaW8uRmlsZUlucHV0U3RyZWFtKGIpLCJ1dGYtOCIpKSxkLGYsZz0iIjt0cnl7ZD1uZXcgamF2YS5sYW5nLlN0cmluZ0J1ZmZlcjsKKGY9Yi5yZWFkTGluZSgpKSYmZi5sZW5ndGgoKSYmZi5jaGFyQXQoMCk9PT02NTI3OSYmKGY9Zi5zdWJzdHJpbmcoMSkpO2ZvcihkLmFwcGVuZChmKTsoZj1iLnJlYWRMaW5lKCkpIT09bnVsbDspZC5hcHBlbmQoZSksZC5hcHBlbmQoZik7Zz1TdHJpbmcoZC50b1N0cmluZygpKX1maW5hbGx5e2IuY2xvc2UoKX1jKGcpfSk7cmV0dXJuIGc9e3ZlcnNpb246IjEuMC42IixzdHJpcDpmdW5jdGlvbihhKXtpZihhKXt2YXIgYT1hLnJlcGxhY2UobiwiIiksYz1hLm1hdGNoKG8pO2MmJihhPWNbMV0pfWVsc2UgYT0iIjtyZXR1cm4gYX0sanNFc2NhcGU6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvKFsnXFxdKS9nLCJcXCQxIikucmVwbGFjZSgvW1xmXS9nLCJcXGYiKS5yZXBsYWNlKC9bXGJdL2csIlxcYiIpLnJlcGxhY2UoL1tcbl0vZywiXFxuIikucmVwbGFjZSgvW1x0XS9nLCJcXHQiKS5yZXBsYWNlKC9bXHJdL2csIlxcciIpfSxjcmVhdGVYaHI6ZnVuY3Rpb24oKXt2YXIgYSxjLApiO2lmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCE9PSJ1bmRlZmluZWQiKXJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3Q7ZWxzZSBmb3IoYz0wO2M8MztjKyspe2I9a1tjXTt0cnl7YT1uZXcgQWN0aXZlWE9iamVjdChiKX1jYXRjaChlKXt9aWYoYSl7az1bYl07YnJlYWt9fWlmKCFhKXRocm93IEVycm9yKCJjcmVhdGVYaHIoKTogWE1MSHR0cFJlcXVlc3Qgbm90IGF2YWlsYWJsZSIpO3JldHVybiBhfSxnZXQ6aCxwYXJzZU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGM9ITEsYj1hLmluZGV4T2YoIi4iKSxlPWEuc3Vic3RyaW5nKDAsYiksYT1hLnN1YnN0cmluZyhiKzEsYS5sZW5ndGgpLGI9YS5pbmRleE9mKCIhIik7YiE9PS0xJiYoYz1hLnN1YnN0cmluZyhiKzEsYS5sZW5ndGgpLGM9Yz09PSJzdHJpcCIsYT1hLnN1YnN0cmluZygwLGIpKTtyZXR1cm57bW9kdWxlTmFtZTplLGV4dDphLHN0cmlwOmN9fSx4ZFJlZ0V4cDovXigoXHcrKVw6KT9cL1wvKFteXC9cXF0rKS8sdXNlWGhyOmZ1bmN0aW9uKGEsCmMsYixlKXt2YXIgZD1nLnhkUmVnRXhwLmV4ZWMoYSksZjtpZighZClyZXR1cm4hMDthPWRbMl07ZD1kWzNdO2Q9ZC5zcGxpdCgiOiIpO2Y9ZFsxXTtkPWRbMF07cmV0dXJuKCFhfHxhPT09YykmJighZHx8ZD09PWIpJiYoIWYmJiFkfHxmPT09ZSl9LGZpbmlzaExvYWQ6ZnVuY3Rpb24oYSxjLGIsZSxkKXtiPWM/Zy5zdHJpcChiKTpiO2QuaXNCdWlsZCYmKGpbYV09Yik7ZShiKX0sbG9hZDpmdW5jdGlvbihhLGMsYixlKXtpZihlLmlzQnVpbGQmJiFlLmlubGluZVRleHQpYigpO2Vsc2V7dmFyIGQ9Zy5wYXJzZU5hbWUoYSksZj1kLm1vZHVsZU5hbWUrIi4iK2QuZXh0LG09Yy50b1VybChmKSxoPWUmJmUudGV4dCYmZS50ZXh0LnVzZVhocnx8Zy51c2VYaHI7IWl8fGgobSxwLHEscik/Zy5nZXQobSxmdW5jdGlvbihjKXtnLmZpbmlzaExvYWQoYSxkLnN0cmlwLGMsYixlKX0pOmMoW2ZdLGZ1bmN0aW9uKGEpe2cuZmluaXNoTG9hZChkLm1vZHVsZU5hbWUrIi4iK2QuZXh0LGQuc3RyaXAsYSwKYixlKX0pfX0sd3JpdGU6ZnVuY3Rpb24oYSxjLGIpe2lmKGMgaW4gail7dmFyIGU9Zy5qc0VzY2FwZShqW2NdKTtiLmFzTW9kdWxlKGErIiEiK2MsImRlZmluZShmdW5jdGlvbiAoKSB7IHJldHVybiAnIitlKyInO30pO1xuIil9fSx3cml0ZUZpbGU6ZnVuY3Rpb24oYSxjLGIsZSxkKXt2YXIgYz1nLnBhcnNlTmFtZShjKSxmPWMubW9kdWxlTmFtZSsiLiIrYy5leHQsaD1iLnRvVXJsKGMubW9kdWxlTmFtZSsiLiIrYy5leHQpKyIuanMiO2cubG9hZChmLGIsZnVuY3Rpb24oKXt2YXIgYj1mdW5jdGlvbihhKXtyZXR1cm4gZShoLGEpfTtiLmFzTW9kdWxlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGUuYXNNb2R1bGUoYSxoLGIpfTtnLndyaXRlKGEsZixiLGQpfSxkKX19fSl9KSgpOwo=", "content_type": "application/javascript"}, "app/config.js": {"data": "CgkvLyBTZXQgdGhlIHJlcXVpcmUuanMgY29uZmlndXJhdGlvbiBmb3IgeW91ciBhcHBsaWNhdGlvbi4KcmVxdWlyZS5jb25maWcoewogIC8vIEluaXRpYWxpemUgdGhlIGFwcGxpY2F0aW9uIHdpdGggdGhlIG1haW4gYXBwbGljYXRpb24gZmlsZQogIGRlcHM6IFsibWFpbiJdLAoKICBwYXRoczogewogICAgLy8gSmF2YVNjcmlwdCBmb2xkZXJzCiAgICBsaWJzOiAiLi4vYXNzZXRzL2pzL2xpYnMiLAogICAgcGx1Z2luczogIi4uL2Fzc2V0cy9qcy9wbHVnaW5zIiwKCiAgICAvLyBMaWJyYXJpZXMKICAgIGpxdWVyeTogIi4uL2Fzc2V0cy9qcy9saWJzL2pxdWVyeSIsCiAgICB1bmRlcnNjb3JlOiAiLi4vYXNzZXRzL2pzL2xpYnMvdW5kZXJzY29yZSIsCiAgICBiYWNrYm9uZTogIi4uL2Fzc2V0cy9qcy9saWJzL2JhY2tib25lLWZ1bGwiLAogICAgYmFja2JvbmVfY291Y2hkYjogIi4uL2Fzc2V0cy9qcy9saWJzL2JhY2tib25lLWNvdWNoZGIiLCAvLyBodHRwczovL2dpdGh1Yi5jb20vamFubW9uc2Noa2UvYmFja2JvbmUtY291Y2hkYgogICAganF1ZXJ5X2NvdWNoOiAiLi4vYXNzZXRzL2pzL2xpYnMvanF1ZXJ5LmNvdWNoIiwKICAgIC8vIFNoaW0gUGx1Z2luCiAgICB1c2U6ICIuLi9hc3NldHMvanMvcGx1Z2lucy91c2UiLAogICAgLy8gdG9kb212YwogICAgdGV4dDogIi4uL2Fzc2V0cy9qcy9wbHVnaW5zL3RleHQiLAogICAgLy9sb2NhbHN0b3JhZ2U6ICAiLi4vYXNzZXRzL2pzL3BsdWdpbnMvYmFja2JvbmUtbG9jYWxzdG9yYWdlIgogICAgc3luY3BvaW50OiAiLi4vYXNzZXRzL2pzL2xpYnMvc3luY3BvaW50LXV0aWxzIiwKICAgIENvcmRvdmE6ICIuLi9hc3NldHMvanMvbGlicy9jb3Jkb3ZhLTIuMC4wIgogIH0sCgogIHVzZTogewogICAgYmFja2JvbmU6IHsKICAgICAgZGVwczogWyJ1c2UhdW5kZXJzY29yZSIsICJqcXVlcnkiXSwKICAgICAgYXR0YWNoOiAiQmFja2JvbmUiCiAgICB9LAoKICAgIHVuZGVyc2NvcmU6IHsKICAgICAgYXR0YWNoOiAiXyIKICAgIH0sCiAgICBiYWNrYm9uZV9jb3VjaGRiOiB7CiAgICAJZGVwczogWyJ1c2UhdW5kZXJzY29yZSIsICJqcXVlcnkiLCJ1c2UhYmFja2JvbmUiLCAidXNlIWpxdWVyeV9jb3VjaCJdCiAgICB9LAogICAganF1ZXJ5X2NvdWNoOiB7CiAgICAJZGVwczogWyJqcXVlcnkiXQogICAgCS8vJC5jb3VjaAogICAgfQogICAgLypsb2NhbHN0b3JhZ2U6IHsKICAgIAlkZXBzOiBbInVzZSF1bmRlcnNjb3JlIiwidXNlIWJhY2tib25lIl0KICAgIH0qLwogIH0KfSk7", "content_type": "application/javascript"}, "app/templates/todomvc.html": {"data": "PGRpdiBpZD0idG9kb2FwcCI+CgogICAgICA8ZGl2IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgPGgxIG9uY2xpY2s9IndpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ2luZGV4Lmh0bWwnIj5Ub2RvczwvaDE+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KCiAgICAgICAgPGRpdiBpZD0iY3JlYXRlLXRvZG8iPgogICAgICAgICAgPGlucHV0IGlkPSJuZXctdG9kbyIgcGxhY2Vob2xkZXI9IldoYXQgbmVlZHMgdG8gYmUgZG9uZT8iIHR5cGU9InRleHQiIC8+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idWktdG9vbHRpcC10b3AiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij5QcmVzcyBFbnRlciB0byBzYXZlIHRoaXMgdGFzazwvc3Bhbj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBpZD0idG9kb3MiPgogICAgICAgICAgPGlucHV0IGNsYXNzPSJjaGVjayBtYXJrLWFsbC1kb25lIiB0eXBlPSJjaGVja2JveCIvPgogICAgICAgICAgPGxhYmVsIGZvcj0iY2hlY2stYWxsIj5NYXJrIGFsbCBhcyBjb21wbGV0ZTwvbGFiZWw+CiAgICAgICAgICA8dWwgaWQ9InRvZG8tbGlzdCI+PC91bD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBpZD0idG9kby1zdGF0cyI+PC9kaXY+CgogICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGlkPSJjcmVkaXRzIj4KICAgICAgICA8cD5Nb2R1bGFyaXplZCBieQogICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9iYWNrYm9uZXR1dG9yaWFscy5jb20iPlRob21hcyBEYXZpczwvYT4uPGJyLz4KICAgICAgICBPcmlnaW5hbGx5IGJ5IAogICAgICA8YSBocmVmPSJodHRwOi8vamduLm1lLyI+SiZlYWN1dGU7ciZvY2lyYzttZSBHcmF2ZWwtTmlxdWV0PC9hPi4KICAgICAgPC9wPgogICAgPC9kaXY+", "content_type": "text/html"}, "assets/js/libs/backbone-full.js": {"data": "", "content_type": "application/javascript"}, "test/jasmine/vendor/jasmine.js": {"data": "", "content_type": "application/javascript"}, "grunt.js": {"data": "Ly8gVGhpcyBpcyB0aGUgbWFpbiBhcHBsaWNhdGlvbiBjb25maWd1cmF0aW9uIGZpbGUuICBJdCBpcyBhIEdydW50Ci8vIGNvbmZpZ3VyYXRpb24gZmlsZSwgd2hpY2ggeW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGhlcmU6Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3dib3kvZ3J1bnQvYmxvYi9tYXN0ZXIvZG9jcy9jb25maWd1cmluZy5tZAovLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdydW50KSB7CgogIGdydW50LmluaXRDb25maWcoewoKICAgIC8vIFRoZSBjbGVhbiB0YXNrIGVuc3VyZXMgYWxsIGZpbGVzIGFyZSByZW1vdmVkIGZyb20gdGhlIGRpc3QvIGRpcmVjdG9yeSBzbwogICAgLy8gdGhhdCBubyBmaWxlcyBsaW5nZXIgZnJvbSBwcmV2aW91cyBidWlsZHMuCiAgICBjbGVhbjogWyJkaXN0LyJdLAoKICAgIC8vIFRoZSBsaW50IHRhc2sgd2lsbCBydW4gdGhlIGJ1aWxkIGNvbmZpZ3VyYXRpb24gYW5kIHRoZSBhcHBsaWNhdGlvbgogICAgLy8gSmF2YVNjcmlwdCB0aHJvdWdoIEpTSGludCBhbmQgcmVwb3J0IGFueSBlcnJvcnMuICBZb3UgY2FuIGNoYW5nZSB0aGUKICAgIC8vIG9wdGlvbnMgZm9yIHRoaXMgdGFzaywgYnkgcmVhZGluZyB0aGlzOgogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nvd2JveS9ncnVudC9ibG9iL21hc3Rlci9kb2NzL3Rhc2tfbGludC5tZAogICAgbGludDogewogICAgICBmaWxlczogWwogICAgICAgICJidWlsZC9jb25maWcuanMiLCAiYXBwLyoqLyouanMiCiAgICAgIF0KICAgIH0sCgogICAgLy8gVGhlIGpzaGludCBvcHRpb24gZm9yIHNjcmlwdHVybCBpcyBzZXQgdG8gbGF4LCBiZWNhdXNlIHRoZSBhbmNob3IKICAgIC8vIG92ZXJyaWRlIGluc2lkZSBtYWluLmpzIG5lZWRzIHRvIHRlc3QgZm9yIHRoZW0gc28gYXMgdG8gbm90IGFjY2lkZW50YWxseQogICAgLy8gcm91dGUuCiAgICBqc2hpbnQ6IHsKICAgICAgb3B0aW9uczogewogICAgICAgIHNjcmlwdHVybDogdHJ1ZQogICAgICB9CiAgICB9LAoKICAgIC8vIFRoZSBqc3QgdGFzayBjb21waWxlcyBhbGwgYXBwbGljYXRpb24gdGVtcGxhdGVzIGludG8gSmF2YVNjcmlwdAogICAgLy8gZnVuY3Rpb25zIHdpdGggdGhlIHVuZGVyc2NvcmUuanMgdGVtcGxhdGUgZnVuY3Rpb24gZnJvbSAxLjIuNC4gIFlvdSBjYW4KICAgIC8vIGNoYW5nZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGUgdGVtcGxhdGUgb3B0aW9ucywgYnkgcmVhZGluZyB0aGlzOgogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RicmFueWVuL2J1aWxkLXRhc2tzL3RyZWUvbWFzdGVyL2pzdAogICAgLy8KICAgIC8vIFRoZSBjb25jYXQgdGFzayBkZXBlbmRzIG9uIHRoaXMgZmlsZSB0byBleGlzdCwgc28gaWYgeW91IGRlY2lkZSB0bwogICAgLy8gcmVtb3ZlIHRoaXMsIGVuc3VyZSBjb25jYXQgaXMgdXBkYXRlZCBhY2NvcmRpbmdseS4KICAgIGpzdDogewogICAgICAiZGlzdC9kZWJ1Zy90ZW1wbGF0ZXMuanMiOiBbCiAgICAgICAgImFwcC90ZW1wbGF0ZXMvKiovKi5odG1sIgogICAgICBdCiAgICB9LAoKICAgIC8vIFRoZSBjb25jYXRlbmF0ZSB0YXNrIGlzIHVzZWQgaGVyZSB0byBtZXJnZSB0aGUgYWxtb25kIHJlcXVpcmUvZGVmaW5lCiAgICAvLyBzaGltIGFuZCB0aGUgdGVtcGxhdGVzIGludG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUuICBJdCdzIG5hbWVkCiAgICAvLyBkaXN0L2RlYnVnL3JlcXVpcmUuanMsIGJlY2F1c2Ugd2Ugd2FudCB0byBvbmx5IGxvYWQgb25lIHNjcmlwdCBmaWxlIGluCiAgICAvLyBpbmRleC5odG1sLgogICAgY29uY2F0OiB7CiAgICAgICJkaXN0L2RlYnVnL3JlcXVpcmUuanMiOiBbCiAgICAgICAgImFzc2V0cy9qcy9saWJzL2FsbW9uZC5qcyIsCiAgICAgICAgImRpc3QvZGVidWcvdGVtcGxhdGVzLmpzIiwKICAgICAgICAiZGlzdC9kZWJ1Zy9yZXF1aXJlLmpzIgogICAgICBdCiAgICB9LAoKICAgIC8vIFRoaXMgdGFzayB1c2VzIHRoZSBNaW5DU1MgTm9kZS5qcyBwcm9qZWN0IHRvIHRha2UgYWxsIHlvdXIgQ1NTIGZpbGVzIGluCiAgICAvLyBvcmRlciBhbmQgY29uY2F0ZW5hdGUgdGhlbSBpbnRvIGEgc2luZ2xlIENTUyBmaWxlIG5hbWVkIGluZGV4LmNzcy4gIEl0CiAgICAvLyBhbHNvIG1pbmlmaWVzIGFsbCB0aGUgQ1NTIGFzIHdlbGwuICBUaGlzIGlzIG5hbWVkIGluZGV4LmNzcywgYmVjYXVzZSB3ZQogICAgLy8gb25seSB3YW50IHRvIGxvYWQgb25lIHN0eWxlc2hlZXQgaW4gaW5kZXguaHRtbC4KICAgIG1pbmNzczogewogICAgICAiZGlzdC9yZWxlYXNlL2luZGV4LmNzcyI6IFsKICAgICAgICAiYXNzZXRzL2Nzcy9zdHlsZS5jc3MiCiAgICAgIF0KICAgIH0sCgogICAgLy8gVGFrZXMgdGhlIGJ1aWx0IHJlcXVpcmUuanMgZmlsZSBhbmQgbWluaWZpZXMgaXQgZm9yIGZpbGVzaXplIGJlbmVmaXRzLgogICAgbWluOiB7CiAgICAgICJkaXN0L3JlbGVhc2UvcmVxdWlyZS5qcyI6IFsKICAgICAgICAiZGlzdC9kZWJ1Zy9yZXF1aXJlLmpzIgogICAgICBdCiAgICB9LAoKICAgIC8vIFJ1bm5pbmcgdGhlIHNlcnZlciB3aXRob3V0IHNwZWNpZnlpbmcgYW4gYWN0aW9uIHdpbGwgcnVuIHRoZSBkZWZhdWx0cywKICAgIC8vIHBvcnQ6IDgwODAgYW5kIGhvc3Q6IDEyNy4wLjAuMS4gIElmIHlvdSB3b3VsZCBsaWtlIHRvIGNoYW5nZSB0aGVzZQogICAgLy8gZGVmYXVsdHMsIHNpbXBseSBhZGQgaW4gdGhlIHByb3BlcnRpZXMgYHBvcnRgIGFuZCBgaG9zdGAgcmVzcGVjdGl2ZWx5LgogICAgLy8KICAgIC8vIENoYW5naW5nIHRoZSBkZWZhdWx0cyBtaWdodCBsb29rIHNvbWV0aGluZyBsaWtlIHRoaXM6CiAgICAvLwogICAgLy8gc2VydmVyOiB7CiAgICAvLyAgIGhvc3Q6ICIxMjcuMC4wLjEiLCBwb3J0OiA5MDAxCiAgICAvLyAgIGRlYnVnOiB7IC4uLiBjYW4gc2V0IGhvc3QgYW5kIHBvcnQgaGVyZSB0b28gLi4uCiAgICAvLyAgfQogICAgLy8KICAgIC8vICBUbyBsZWFybiBtb3JlIGFib3V0IHVzaW5nIHRoZSBzZXJ2ZXIgdGFzaywgcGxlYXNlIHJlZmVyIHRvIHRoZSBjb2RlCiAgICAvLyAgdW50aWwgZG9jdW1lbnRhdGlvbiBoYXMgYmVlbiB3cml0dGVuLgogICAgc2VydmVyOiB7CiAgICAgIGZpbGVzOiB7ICJmYXZpY29uLmljbyI6ICJmYXZpY29uLmljbyIgfSwKCiAgICAgIGRlYnVnOiB7CiAgICAgICAgZmlsZXM6IHsgImZhdmljb24uaWNvIjogImZhdmljb24uaWNvIiB9LAoKICAgICAgICBmb2xkZXJzOiB7CiAgICAgICAgICAiYXBwIjogImRpc3QvZGVidWciLAogICAgICAgICAgImFzc2V0cy9qcy9saWJzIjogImRpc3QvZGVidWciCiAgICAgICAgfQogICAgICB9LAoKICAgICAgcmVsZWFzZTogewogICAgICAgIC8vIFRoZXNlIHR3byBvcHRpb25zIG1ha2UgaXQgZWFzaWVyIGZvciBkZXBsb3lpbmcsIGJ5IHVzaW5nIHdoYXRldmVyCiAgICAgICAgLy8gUE9SVCBpcyBhdmFpbGFibGUgaW4gdGhlIGVudmlyb25tZW50IGFuZCBkZWZhdWx0aW5nIHRvIGFueSBJUC4KICAgICAgICBob3N0OiAiMC4wLjAuMCIsCiAgICAgICAgcG9ydDogcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDAwLAoKICAgICAgICBmaWxlczogeyAiZmF2aWNvbi5pY28iOiAiZmF2aWNvbi5pY28iIH0sCgogICAgICAgIGZvbGRlcnM6IHsKICAgICAgICAgICJhcHAiOiAiZGlzdC9yZWxlYXNlIiwKICAgICAgICAgICJhc3NldHMvanMvbGlicyI6ICJkaXN0L3JlbGVhc2UiLAogICAgICAgICAgImFzc2V0cy9jc3MiOiAiZGlzdC9yZWxlYXNlIgogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAvLyBUaGlzIHRhc2sgdXNlcyBKYW1lcyBCdXJrZSdzIGV4Y2VsbGVudCByLmpzIEFNRCBidWlsZCB0b29sLiAgSW4gdGhlCiAgICAvLyBmdXR1cmUgb3RoZXIgYnVpbGRlcnMgbWF5IGJlIGNvbnRyaWJ1dGVkIGFzIGRyb3AtaW4gYWx0ZXJuYXRpdmVzLgogICAgcmVxdWlyZWpzOiB7CiAgICAgIC8vIEluY2x1ZGUgdGhlIG1haW4gY29uZmlndXJhdGlvbiBmaWxlCiAgICAgIG1haW5Db25maWdGaWxlOiAiYXBwL2NvbmZpZy5qcyIsCgogICAgICAvLyBPdXRwdXQgZmlsZQogICAgICBvdXQ6ICJkaXN0L2RlYnVnL3JlcXVpcmUuanMiLAoKICAgICAgLy8gUm9vdCBhcHBsaWNhdGlvbiBtb2R1bGUKICAgICAgbmFtZTogImNvbmZpZyIsCgogICAgICAvLyBEbyBub3Qgd3JhcCBldmVyeXRoaW5nIGluIGFuIElJRkUKICAgICAgd3JhcDogZmFsc2UKICAgIH0KCiAgfSk7CgogIC8vIFRoZSBkZWZhdWx0IHRhc2sgd2lsbCByZW1vdmUgYWxsIGNvbnRlbnRzIGluc2lkZSB0aGUgZGlzdC8gZm9sZGVyLCBsaW50CiAgLy8gYWxsIHlvdXIgY29kZSwgcHJlY29tcGlsZSBhbGwgdGhlIHVuZGVyc2NvcmUgdGVtcGxhdGVzIGludG8KICAvLyBkaXN0L2RlYnVnL3RlbXBsYXRlcy5qcywgY29tcGlsZSBhbGwgdGhlIGFwcGxpY2F0aW9uIGNvZGUgaW50bwogIC8vIGRpc3QvZGVidWcvcmVxdWlyZS5qcywgYW5kIHRoZW4gY29uY2F0ZW5hdGUgdGhlIHJlcXVpcmUvZGVmaW5lIHNoaW0KICAvLyBhbG1vbmQuanMgYW5kIGRpc3QvZGVidWcvdGVtcGxhdGVzLmpzIGludG8gdGhlIHJlcXVpcmUuanMgZmlsZS4KICBncnVudC5yZWdpc3RlclRhc2soImRlZmF1bHQiLCAiY2xlYW4gbGludCBqc3QgcmVxdWlyZWpzIGNvbmNhdCIpOwoKICAvLyBUaGUgZGVidWcgdGFzayBpcyBzaW1wbHkgYW4gYWxpYXMgdG8gZGVmYXVsdCB0byByZW1haW4gY29uc2lzdGVudCB3aXRoCiAgLy8gZGVidWcvcmVsZWFzZS4KICBncnVudC5yZWdpc3RlclRhc2soImRlYnVnIiwgImRlZmF1bHQiKTsKCiAgLy8gVGhlIHJlbGVhc2UgdGFzayB3aWxsIHJ1biB0aGUgZGVidWcgdGFza3MgYW5kIHRoZW4gbWluaWZ5IHRoZQogIC8vIGRpc3QvZGVidWcvcmVxdWlyZS5qcyBmaWxlIGFuZCBDU1MgZmlsZXMuCiAgZ3J1bnQucmVnaXN0ZXJUYXNrKCJyZWxlYXNlIiwgImRlZmF1bHQgbWluIG1pbmNzcyIpOwoKfTsK", "content_type": "application/javascript"}, "assets/img/backbone.png": {"data": "", "content_type": "image/png"}, "favicon.ico": {"data": "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAABMLAAATCwAAAAAAAAAAAAAAAAAAvoYqxNexaN3gxp1sAAAAAP///wP///8H////CP///wj///8I////BAAAAADMyMFLjoR3yGFTQ7EAAAAAAAAAALNvAPTlqAD/3ao3/9ezeMzu3sdDAAAAAP///wT///8EAAAAAOTh3iiakoWwdmVG/1U4Bv8oFgD6AAAAAAAAAAC1cwPq5a0D/+erAP/nqgX/26pB/9ezfK/17eEk+fj4DqehlomCc172XUAb/1IzAP9aPwD/MiIA7QAAAAAAAAAAtXMD6uWtBP/ntBj/5q8X/+amAP/mrxz/165d9KGRc+NlUDD/RiYA/2FGF/9xWB3/X0QH/zIgAO0AAAAAAAAAALRzAuvkqgL/zJtC/+7YsqPRplL367IT/+CfAP+PWgD/VDoG/3ppSP60raSwbmFH/mBFDP8wHwDuAAAAAAAAAAC0cwLr5asD/9GiTP/Ivqy4fm9S+qBvDv+7gAD/pnAA/8CEAv/SpUH/5sqcwn5wUv9fRAz/MB8A7gAAAAAAAAAAtXMD6uevBP/Slgn/a0cI/0AjAP9jUDD/mI134d/Ai9XhsT7/6asA/+aqBf+/hwn/XkME/zEgAO0AAAAAAAAAALh1AernrwH/26AA/6V3Gv+GdlzyqqWgbv7+/wIAAAAA79i2UdSsaOHLmy3/lGYA/1g9AP8tHQDtAAAAAAAAAACWYgXq4KYF/+yzAP/psxf/16pW9OnOpXf8+fQR////AsG/vFCEemnhZ1It/1A4AP9nSAD/SzAA7QAAAAAAAAAAOCsM6oliC//Rmg3/564N/+enAP/irCT/06ph5KSYhcxuWj3/SSkA/1g8Cf+UbA3/zpUE/7NwAO0AAAAAAAAAADwsCutYPwn/c2VN/+LLpcDarUz767IK/+ChAP+SXwD/TjUE/3JjQ/+ooZLN1KVR/umyDf+zbwDuAAAAAAAAAAA9LQrrXkQJ/2xfSP/KyMObgG9P+bN+Dv/HiwD/n2kA/7F5Bf/GnUv/7NWvqMqaRf/mrQr/sW4A7gAAAAAAAAAAPi4L6mNJC/9qURf/ZEkW/0stAP9bRBz/koJf9Nm1cuvlsi//6KoA/+euEv/ptRf/5a0F/7JvAO0AAAAAAAAAAD4uC+piSAr/VTYA/1g7Df96aUz8mI+Cou/u7Rj//foJ3sCUgNasWfTkqxn/56oA/+SqAP+ybwDtAAAAAAAAAAA5KATyXUAE/3JdOP+LgHDK2tfSMgAAAAD///8E////Bf///wH58+oc2LaBqdqsS/3lqQr/r2kA+QAAAAAAAAAAUEEozoN4ZN/DvrdYAAAAAP///wP///8H////CP///wj///8I////BAAAAADw48460KZmyMCJObgAAAAA+B+AAPAPAADAAwAAgAEAAIABAAAAAAAAAADMHQAAAAAAAAAAAAAAAAAAAACAAQAAgAEAAMADAADwDwAA+B8AAA==", "content_type": "image/x-icon"}, "app/templates/stats.html": {"data": "IDwlIGlmICh0b3RhbCkgeyAlPgogICAgICAgIDxzcGFuIGNsYXNzPSJ0b2RvLWNvdW50Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJudW1iZXIiPjwlPSByZW1haW5pbmcgJT48L3NwYW4+CiAgICAgICAgICA8c3BhbiBjbGFzcz0id29yZCI+PCU9IHJlbWFpbmluZyA9PSAxID8gJ2l0ZW0nIDogJ2l0ZW1zJyAlPjwvc3Bhbj4gbGVmdC4KICAgICAgICA8L3NwYW4+CiAgICAgIDwlIH0gJT4KICAgICAgPCUgaWYgKGRvbmUpIHsgJT4KICAgICAgICA8c3BhbiBjbGFzcz0idG9kby1jbGVhciI+CiAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgQ2xlYXIgPHNwYW4gY2xhc3M9Im51bWJlci1kb25lIj48JT0gZG9uZSAlPjwvc3Bhbj4KICAgICAgICAgICAgY29tcGxldGVkIDxzcGFuIGNsYXNzPSJ3b3JkLWRvbmUiPjwlPSBkb25lID09IDEgPyAnaXRlbScgOiAnaXRlbXMnICU+PC9zcGFuPgogICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgICAgPCUgfSAlPgo=", "content_type": "text/html"}, "assets/js/libs/almond.js": {"data": "", "content_type": "application/javascript"}, "test/jasmine/vendor/jasmine.css": {"data": "Ym9keSB7CiAgZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSBMaWdodCIsICJMdWNpZGEgR3JhbmRlIiwgIkNhbGlicmkiLCAiQXJpYWwiLCBzYW5zLXNlcmlmOwp9CgoKLmphc21pbmVfcmVwb3J0ZXIgYTp2aXNpdGVkLCAuamFzbWluZV9yZXBvcnRlciBhIHsKICBjb2xvcjogIzMwMzsgCn0KCi5qYXNtaW5lX3JlcG9ydGVyIGE6aG92ZXIsIC5qYXNtaW5lX3JlcG9ydGVyIGE6YWN0aXZlIHsKICBjb2xvcjogYmx1ZTsgCn0KCi5ydW5fc3BlYyB7CiAgZmxvYXQ6cmlnaHQ7CiAgcGFkZGluZy1yaWdodDogNXB4OwogIGZvbnQtc2l6ZTogLjhlbTsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KCi5qYXNtaW5lX3JlcG9ydGVyIHsKICBtYXJnaW46IDAgNXB4Owp9CgouYmFubmVyIHsKICBjb2xvcjogIzMwMzsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmOwogIHBhZGRpbmc6IDVweDsKfQoKLmxvZ28gewogIGZsb2F0OiBsZWZ0OwogIGZvbnQtc2l6ZTogMS4xZW07CiAgcGFkZGluZy1sZWZ0OiA1cHg7Cn0KCi5sb2dvIC52ZXJzaW9uIHsKICBmb250LXNpemU6IC42ZW07CiAgcGFkZGluZy1sZWZ0OiAxZW07Cn0KCi5ydW5uZXIucnVubmluZyB7CiAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93Owp9CgoKLm9wdGlvbnMgewogIHRleHQtYWxpZ246IHJpZ2h0OwogIGZvbnQtc2l6ZTogLjhlbTsKfQoKCgoKLnN1aXRlIHsKICBib3JkZXI6IDFweCBvdXRzZXQgZ3JheTsKICBtYXJnaW46IDVweCAwOwogIHBhZGRpbmctbGVmdDogMWVtOwp9Cgouc3VpdGUgLnN1aXRlIHsKICBtYXJnaW46IDVweDsgCn0KCi5zdWl0ZS5wYXNzZWQgewogIGJhY2tncm91bmQtY29sb3I6ICNkZmQ7Cn0KCi5zdWl0ZS5mYWlsZWQgewogIGJhY2tncm91bmQtY29sb3I6ICNmZGQ7Cn0KCi5zcGVjIHsKICBtYXJnaW46IDVweDsKICBwYWRkaW5nLWxlZnQ6IDFlbTsKICBjbGVhcjogYm90aDsKfQoKLnNwZWMuZmFpbGVkLCAuc3BlYy5wYXNzZWQsIC5zcGVjLnNraXBwZWQgewogIHBhZGRpbmctYm90dG9tOiA1cHg7CiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTsKfQoKLnNwZWMuZmFpbGVkIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJiOwogIGJvcmRlci1jb2xvcjogcmVkOwp9Cgouc3BlYy5wYXNzZWQgewogIGJhY2tncm91bmQtY29sb3I6ICNiZmI7CiAgYm9yZGVyLWNvbG9yOiBncmVlbjsKfQoKLnNwZWMuc2tpcHBlZCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2JiYjsKfQoKLm1lc3NhZ2VzIHsKICBib3JkZXItbGVmdDogMXB4IGRhc2hlZCBncmF5OwogIHBhZGRpbmctbGVmdDogMWVtOwogIHBhZGRpbmctcmlnaHQ6IDFlbTsKfQoKLnBhc3NlZCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2NmYzsKICBkaXNwbGF5OiBub25lOwp9CgouZmFpbGVkIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJiOwp9Cgouc2tpcHBlZCB7CiAgY29sb3I6ICM3Nzc7CiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTsKICBkaXNwbGF5OiBub25lOwp9CgoKLyoucmVzdWx0TWVzc2FnZSB7Ki8KICAvKndoaXRlLXNwYWNlOiBwcmU7Ki8KLyp9Ki8KCi5yZXN1bHRNZXNzYWdlIHNwYW4ucmVzdWx0IHsKICBkaXNwbGF5OiBibG9jazsKICBsaW5lLWhlaWdodDogMmVtOwogIGNvbG9yOiBibGFjazsKfQoKLnJlc3VsdE1lc3NhZ2UgLm1pc21hdGNoIHsKICBjb2xvcjogYmxhY2s7Cn0KCi5zdGFja1RyYWNlIHsKICB3aGl0ZS1zcGFjZTogcHJlOwogIGZvbnQtc2l6ZTogLjhlbTsKICBtYXJnaW4tbGVmdDogMTBweDsKICBtYXgtaGVpZ2h0OiA1ZW07CiAgb3ZlcmZsb3c6IGF1dG87CiAgYm9yZGVyOiAxcHggaW5zZXQgcmVkOwogIHBhZGRpbmc6IDFlbTsKICBiYWNrZ3JvdW5kOiAjZWVmOwp9CgouZmluaXNoZWQtYXQgewogIHBhZGRpbmctbGVmdDogMWVtOwogIGZvbnQtc2l6ZTogLjZlbTsKfQoKLnNob3ctcGFzc2VkIC5wYXNzZWQsCi5zaG93LXNraXBwZWQgLnNraXBwZWQgewogIGRpc3BsYXk6IGJsb2NrOwp9CgoKI2phc21pbmVfY29udGVudCB7CiAgcG9zaXRpb246Zml4ZWQ7CiAgcmlnaHQ6IDEwMCU7Cn0KCi5ydW5uZXIgewogIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7CiAgZGlzcGxheTogYmxvY2s7CiAgbWFyZ2luOiA1cHggMDsKICBwYWRkaW5nOiAycHggMCAycHggMTBweDsKfQo=", "content_type": "text/css"}, "assets/js/libs/backbone.js": {"data": "", "content_type": "application/javascript"}, "app/namespace.js": {"data": "ZGVmaW5lKFsKICAvLyBMaWJzCiAgImpxdWVyeSIsCiAgInVzZSF1bmRlcnNjb3JlIiwKICAidXNlIWJhY2tib25lIiwKICAidXNlIWJhY2tib25lX2NvdWNoZGIiCl0sCgpmdW5jdGlvbigkLCBfLCBCYWNrYm9uZSkgewogIC8vIFB1dCBhcHBsaWNhdGlvbiB3aWRlIGNvZGUgaGVyZQoKICByZXR1cm4gewogICAgLy8gVGhpcyBpcyB1c2VmdWwgd2hlbiBkZXZlbG9waW5nIGlmIHlvdSBkb24ndCB3YW50IHRvIHVzZSBhCiAgICAvLyBidWlsZCBwcm9jZXNzIGV2ZXJ5IHRpbWUgeW91IGNoYW5nZSBhIHRlbXBsYXRlLgogICAgLy8KICAgIC8vIERlbGV0ZSBpZiB5b3UgYXJlIHVzaW5nIGEgZGlmZmVyZW50IHRlbXBsYXRlIGxvYWRpbmcgbWV0aG9kLgogICAgZmV0Y2hUZW1wbGF0ZTogZnVuY3Rpb24ocGF0aCwgZG9uZSkgewogICAgICB2YXIgSlNUID0gd2luZG93LkpTVCA9IHdpbmRvdy5KU1QgfHwge307CiAgICAgIHZhciBkZWYgPSBuZXcgJC5EZWZlcnJlZCgpOwoKICAgICAgLy8gU2hvdWxkIGJlIGFuIGluc3RhbnQgc3luY2hyb25vdXMgd2F5IG9mIGdldHRpbmcgdGhlIHRlbXBsYXRlLCBpZiBpdAogICAgICAvLyBleGlzdHMgaW4gdGhlIEpTVCBvYmplY3QuCiAgICAgIGlmIChKU1RbcGF0aF0pIHsKICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGRvbmUpKSB7CiAgICAgICAgICBkb25lKEpTVFtwYXRoXSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZGVmLnJlc29sdmUoSlNUW3BhdGhdKTsKICAgICAgfQoKICAgICAgLy8gRmV0Y2ggaXQgYXN5bmNocm9ub3VzbHkgaWYgbm90IGF2YWlsYWJsZSBmcm9tIEpTVCwgZW5zdXJlIHRoYXQKICAgICAgLy8gdGVtcGxhdGUgcmVxdWVzdHMgYXJlIG5ldmVyIGNhY2hlZCBhbmQgcHJldmVudCBnbG9iYWwgYWpheCBldmVudAogICAgICAvLyBoYW5kbGVycyBmcm9tIGZpcmluZy4KICAgICAgJC5hamF4KHsKICAgICAgICB1cmw6IHBhdGgsCiAgICAgICAgdHlwZTogImdldCIsCiAgICAgICAgZGF0YVR5cGU6ICJ0ZXh0IiwKICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgZ2xvYmFsOiBmYWxzZSwKCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oY29udGVudHMpIHsKICAgICAgICAgIEpTVFtwYXRoXSA9IF8udGVtcGxhdGUoY29udGVudHMpOwoKICAgICAgICAgIC8vIFNldCB0aGUgZ2xvYmFsIEpTVCBjYWNoZSBhbmQgcmV0dXJuIHRoZSB0ZW1wbGF0ZQogICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihkb25lKSkgewogICAgICAgICAgICBkb25lKEpTVFtwYXRoXSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gUmVzb2x2ZSB0aGUgdGVtcGxhdGUgZGVmZXJyZWQKICAgICAgICAgIGRlZi5yZXNvbHZlKEpTVFtwYXRoXSk7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIC8vIEVuc3VyZSBhIG5vcm1hbGl6ZWQgcmV0dXJuIHZhbHVlIChQcm9taXNlKQogICAgICByZXR1cm4gZGVmLnByb21pc2UoKTsKICAgIH0sCgogICAgLy8gQ3JlYXRlIGEgY3VzdG9tIG9iamVjdCB3aXRoIGEgbmVzdGVkIFZpZXdzIG9iamVjdAogICAgbW9kdWxlOiBmdW5jdGlvbihhZGRpdGlvbmFsUHJvcHMpIHsKICAgICAgcmV0dXJuIF8uZXh0ZW5kKHsgVmlld3M6IHt9IH0sIGFkZGl0aW9uYWxQcm9wcyk7CiAgICB9LAoKICAgIC8vIEtlZXAgYWN0aXZlIGFwcGxpY2F0aW9uIGluc3RhbmNlcyBuYW1lc3BhY2VkIHVuZGVyIGFuIGFwcCBvYmplY3QuCiAgICBhcHA6IF8uZXh0ZW5kKHt9LCBCYWNrYm9uZS5FdmVudHMpCiAgfTsKfSk7Cg==", "content_type": "application/javascript"}, "app/modules/example.js": {"data": "ZGVmaW5lKFsKICAibmFtZXNwYWNlIiwKCiAgLy8gTGlicwogICJ1c2UhYmFja2JvbmUiLAogICJ1c2UhYmFja2JvbmVfY291Y2hkYiIKCiAgLy8gTW9kdWxlcwoKICAvLyBQbHVnaW5zCl0sCgpmdW5jdGlvbihuYW1lc3BhY2UsIEJhY2tib25lKSB7CgogIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUKICB2YXIgRXhhbXBsZSA9IG5hbWVzcGFjZS5tb2R1bGUoKTsKCiAgLy8gRXhhbXBsZSBleHRlbmRpbmdzCiAgRXhhbXBsZS5Nb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7IC8qIC4uLiAqLyB9KTsKICBFeGFtcGxlLkNvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7CgkJaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7CgkJCXRoaXMucGFnZSA9IDE7CgkJfSwKCQlkYiA6IHsKCQkJdmlldzogImJ5SWQiLAoJCX0sCgkJdXJsIDogIi9leGFtcGxlIiwKCQltb2RlbCA6IEV4YW1wbGUKCX0pOwogIEV4YW1wbGUuUm91dGVyID0gQmFja2JvbmUuUm91dGVyLmV4dGVuZCh7IC8qIC4uLiAqLyB9KTsKCiAgLy8gVGhpcyB3aWxsIGZldGNoIHRoZSB0dXRvcmlhbCB0ZW1wbGF0ZSBhbmQgcmVuZGVyIGl0LgogIEV4YW1wbGUuVmlld3MuVHV0b3JpYWwgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CiAgICB0ZW1wbGF0ZTogImFwcC90ZW1wbGF0ZXMvZXhhbXBsZS5odG1sIiwKCiAgICByZW5kZXI6IGZ1bmN0aW9uKGRvbmUpIHsKICAgICAgdmFyIHZpZXcgPSB0aGlzOwoKICAgICAgLy8gRmV0Y2ggdGhlIHRlbXBsYXRlLCByZW5kZXIgaXQgdG8gdGhlIFZpZXcgZWxlbWVudCBhbmQgY2FsbCBkb25lLgogICAgICBuYW1lc3BhY2UuZmV0Y2hUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCBmdW5jdGlvbih0bXBsKSB7CiAgICAgICAgdmlldy5lbC5pbm5lckhUTUwgPSB0bXBsKCk7CgogICAgICAgIC8vIElmIGEgZG9uZSBmdW5jdGlvbiBpcyBwYXNzZWQsIGNhbGwgaXQgd2l0aCB0aGUgZWxlbWVudAogICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZG9uZSkpIHsKICAgICAgICAgIGRvbmUodmlldy5lbCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9KTsKCiAgLy8gUmVxdWlyZWQsIHJldHVybiB0aGUgbW9kdWxlIGZvciBBTUQgY29tcGxpYW5jZQogIHJldHVybiBFeGFtcGxlOwoKfSk7Cg==", "content_type": "application/javascript"}, "assets/js/libs/jquery.js": {"data": "", "content_type": "application/javascript"}, "assets/css/todos.css": {"data": "", "content_type": "text/css"}, "test/qunit/vendor/qunit.css": {"data": "LyoqCiAqIFFVbml0IDEuMi4wcHJlIC0gQSBKYXZhU2NyaXB0IFVuaXQgVGVzdGluZyBGcmFtZXdvcmsKICoKICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9RVW5pdAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTEgSm9obiBSZXNpZywgSsODwrZybiBaYWVmZmVyZXIKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIChNSVQtTElDRU5TRS50eHQpCiAqIG9yIEdQTCAoR1BMLUxJQ0VOU0UudHh0KSBsaWNlbnNlcy4KICogUHVsbGVkIExpdmUgZnJvbSBHaXQgTW9uIE9jdCAzMSAxNDowMDowMiBVVEMgMjAxMQogKiBMYXN0IENvbW1pdDogZWUxNTY5MjNjZGIwMTgyMGUzNWU2YmI1NzlkNWNmNmJmNTU3MzZkNAogKi8KCi8qKiBGb250IEZhbWlseSBhbmQgU2l6ZXMgKi8KCiNxdW5pdC10ZXN0cywgI3F1bml0LWhlYWRlciwgI3F1bml0LWJhbm5lciwgI3F1bml0LXRlc3RydW5uZXItdG9vbGJhciwgI3F1bml0LXVzZXJBZ2VudCwgI3F1bml0LXRlc3RyZXN1bHQgewoJZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSBMaWdodCIsICJIZWx2ZXRpY2FOZXVlLUxpZ2h0IiwgIkhlbHZldGljYSBOZXVlIiwgQ2FsaWJyaSwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKfQoKI3F1bml0LXRlc3RydW5uZXItdG9vbGJhciwgI3F1bml0LXVzZXJBZ2VudCwgI3F1bml0LXRlc3RyZXN1bHQsICNxdW5pdC10ZXN0cyBsaSB7IGZvbnQtc2l6ZTogc21hbGw7IH0KI3F1bml0LXRlc3RzIHsgZm9udC1zaXplOiBzbWFsbGVyOyB9CgoKLyoqIFJlc2V0cyAqLwoKI3F1bml0LXRlc3RzLCAjcXVuaXQtdGVzdHMgb2wsICNxdW5pdC1oZWFkZXIsICNxdW5pdC1iYW5uZXIsICNxdW5pdC11c2VyQWdlbnQsICNxdW5pdC10ZXN0cmVzdWx0IHsKCW1hcmdpbjogMDsKCXBhZGRpbmc6IDA7Cn0KCgovKiogSGVhZGVyICovCgojcXVuaXQtaGVhZGVyIHsKCXBhZGRpbmc6IDAuNWVtIDAgMC41ZW0gMWVtOwoKCWNvbG9yOiAjODY5OWE0OwoJYmFja2dyb3VuZC1jb2xvcjogIzBkMzM0OTsKCglmb250LXNpemU6IDEuNWVtOwoJbGluZS1oZWlnaHQ6IDFlbTsKCWZvbnQtd2VpZ2h0OiBub3JtYWw7CgoJYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDAgMDsKCS1tb3otYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDAgMDsKCS13ZWJraXQtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDE1cHg7Cgktd2Via2l0LWJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDE1cHg7Cn0KCiNxdW5pdC1oZWFkZXIgYSB7Cgl0ZXh0LWRlY29yYXRpb246IG5vbmU7Cgljb2xvcjogI2MyY2NkMTsKfQoKI3F1bml0LWhlYWRlciBhOmhvdmVyLAojcXVuaXQtaGVhZGVyIGE6Zm9jdXMgewoJY29sb3I6ICNmZmY7Cn0KCiNxdW5pdC1iYW5uZXIgewoJaGVpZ2h0OiA1cHg7Cn0KCiNxdW5pdC10ZXN0cnVubmVyLXRvb2xiYXIgewoJcGFkZGluZzogMC41ZW0gMCAwLjVlbSAyZW07Cgljb2xvcjogIzVFNzQwQjsKCWJhY2tncm91bmQtY29sb3I6ICNlZWU7Cn0KCiNxdW5pdC11c2VyQWdlbnQgewoJcGFkZGluZzogMC41ZW0gMCAwLjVlbSAyLjVlbTsKCWJhY2tncm91bmQtY29sb3I6ICMyYjgxYWY7Cgljb2xvcjogI2ZmZjsKCXRleHQtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuNSkgMnB4IDJweCAxcHg7Cn0KCgovKiogVGVzdHM6IFBhc3MvRmFpbCAqLwoKI3F1bml0LXRlc3RzIHsKCWxpc3Qtc3R5bGUtcG9zaXRpb246IGluc2lkZTsKfQoKI3F1bml0LXRlc3RzIGxpIHsKCXBhZGRpbmc6IDAuNGVtIDAuNWVtIDAuNGVtIDIuNWVtOwoJYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7CglsaXN0LXN0eWxlLXBvc2l0aW9uOiBpbnNpZGU7Cn0KCiNxdW5pdC10ZXN0cy5oaWRlcGFzcyBsaS5wYXNzLCAjcXVuaXQtdGVzdHMuaGlkZXBhc3MgbGkucnVubmluZyAgewoJZGlzcGxheTogbm9uZTsKfQoKI3F1bml0LXRlc3RzIGxpIHN0cm9uZyB7CgljdXJzb3I6IHBvaW50ZXI7Cn0KCiNxdW5pdC10ZXN0cyBsaSBhIHsKCXBhZGRpbmc6IDAuNWVtOwoJY29sb3I6ICNjMmNjZDE7Cgl0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KI3F1bml0LXRlc3RzIGxpIGE6aG92ZXIsCiNxdW5pdC10ZXN0cyBsaSBhOmZvY3VzIHsKCWNvbG9yOiAjMDAwOwp9CgojcXVuaXQtdGVzdHMgb2wgewoJbWFyZ2luLXRvcDogMC41ZW07CglwYWRkaW5nOiAwLjVlbTsKCgliYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwoKCWJvcmRlci1yYWRpdXM6IDE1cHg7CgktbW96LWJvcmRlci1yYWRpdXM6IDE1cHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDE1cHg7CgoJYm94LXNoYWRvdzogaW5zZXQgMHB4IDJweCAxM3B4ICM5OTk7CgktbW96LWJveC1zaGFkb3c6IGluc2V0IDBweCAycHggMTNweCAjOTk5OwoJLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwcHggMnB4IDEzcHggIzk5OTsKfQoKI3F1bml0LXRlc3RzIHRhYmxlIHsKCWJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CgltYXJnaW4tdG9wOiAuMmVtOwp9CgojcXVuaXQtdGVzdHMgdGggewoJdGV4dC1hbGlnbjogcmlnaHQ7Cgl2ZXJ0aWNhbC1hbGlnbjogdG9wOwoJcGFkZGluZzogMCAuNWVtIDAgMDsKfQoKI3F1bml0LXRlc3RzIHRkIHsKCXZlcnRpY2FsLWFsaWduOiB0b3A7Cn0KCiNxdW5pdC10ZXN0cyBwcmUgewoJbWFyZ2luOiAwOwoJd2hpdGUtc3BhY2U6IHByZS13cmFwOwoJd29yZC13cmFwOiBicmVhay13b3JkOwp9CgojcXVuaXQtdGVzdHMgZGVsIHsKCWJhY2tncm91bmQtY29sb3I6ICNlMGYyYmU7Cgljb2xvcjogIzM3NGUwYzsKCXRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKI3F1bml0LXRlc3RzIGlucyB7CgliYWNrZ3JvdW5kLWNvbG9yOiAjZmZjYWNhOwoJY29sb3I6ICM1MDA7Cgl0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KCi8qKiogVGVzdCBDb3VudHMgKi8KCiNxdW5pdC10ZXN0cyBiLmNvdW50cyAgICAgICAgICAgICAgICAgICAgICAgeyBjb2xvcjogYmxhY2s7IH0KI3F1bml0LXRlc3RzIGIucGFzc2VkICAgICAgICAgICAgICAgICAgICAgICB7IGNvbG9yOiAjNUU3NDBCOyB9CiNxdW5pdC10ZXN0cyBiLmZhaWxlZCAgICAgICAgICAgICAgICAgICAgICAgeyBjb2xvcjogIzcxMDkwOTsgfQoKI3F1bml0LXRlc3RzIGxpIGxpIHsKCW1hcmdpbjogMC41ZW07CglwYWRkaW5nOiAwLjRlbSAwLjVlbSAwLjRlbSAwLjVlbTsKCWJhY2tncm91bmQtY29sb3I6ICNmZmY7Cglib3JkZXItYm90dG9tOiBub25lOwoJbGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlOwp9CgovKioqIFBhc3NpbmcgU3R5bGVzICovCgojcXVuaXQtdGVzdHMgbGkgbGkucGFzcyB7Cgljb2xvcjogIzVFNzQwQjsKCWJhY2tncm91bmQtY29sb3I6ICNmZmY7Cglib3JkZXItbGVmdDogMjZweCBzb2xpZCAjQzZFNzQ2Owp9CgojcXVuaXQtdGVzdHMgLnBhc3MgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY29sb3I6ICM1MjhDRTA7IGJhY2tncm91bmQtY29sb3I6ICNEMkUwRTY7IH0KI3F1bml0LXRlc3RzIC5wYXNzIC50ZXN0LW5hbWUgICAgICAgICAgICAgICB7IGNvbG9yOiAjMzY2MDk3OyB9CgojcXVuaXQtdGVzdHMgLnBhc3MgLnRlc3QtYWN0dWFsLAojcXVuaXQtdGVzdHMgLnBhc3MgLnRlc3QtZXhwZWN0ZWQgICAgICAgICAgIHsgY29sb3I6ICM5OTk5OTk7IH0KCiNxdW5pdC1iYW5uZXIucXVuaXQtcGFzcyAgICAgICAgICAgICAgICAgICAgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjQzZFNzQ2OyB9CgovKioqIEZhaWxpbmcgU3R5bGVzICovCgojcXVuaXQtdGVzdHMgbGkgbGkuZmFpbCB7Cgljb2xvcjogIzcxMDkwOTsKCWJhY2tncm91bmQtY29sb3I6ICNmZmY7Cglib3JkZXItbGVmdDogMjZweCBzb2xpZCAjRUU1NzU3OwoJd2hpdGUtc3BhY2U6IHByZTsKfQoKI3F1bml0LXRlc3RzID4gbGk6bGFzdC1jaGlsZCB7Cglib3JkZXItcmFkaXVzOiAwIDAgMTVweCAxNXB4OwoJLW1vei1ib3JkZXItcmFkaXVzOiAwIDAgMTVweCAxNXB4OwoJLXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMTVweDsKCS13ZWJraXQtYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMTVweDsKfQoKI3F1bml0LXRlc3RzIC5mYWlsICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNvbG9yOiAjMDAwMDAwOyBiYWNrZ3JvdW5kLWNvbG9yOiAjRUU1NzU3OyB9CiNxdW5pdC10ZXN0cyAuZmFpbCAudGVzdC1uYW1lLAojcXVuaXQtdGVzdHMgLmZhaWwgLm1vZHVsZS1uYW1lICAgICAgICAgICAgIHsgY29sb3I6ICMwMDAwMDA7IH0KCiNxdW5pdC10ZXN0cyAuZmFpbCAudGVzdC1hY3R1YWwgICAgICAgICAgICAgeyBjb2xvcjogI0VFNTc1NzsgfQojcXVuaXQtdGVzdHMgLmZhaWwgLnRlc3QtZXhwZWN0ZWQgICAgICAgICAgIHsgY29sb3I6IGdyZWVuOyAgIH0KCiNxdW5pdC1iYW5uZXIucXVuaXQtZmFpbCAgICAgICAgICAgICAgICAgICAgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjRUU1NzU3OyB9CgoKLyoqIFJlc3VsdCAqLwoKI3F1bml0LXRlc3RyZXN1bHQgewoJcGFkZGluZzogMC41ZW0gMC41ZW0gMC41ZW0gMi41ZW07CgoJY29sb3I6ICMyYjgxYWY7CgliYWNrZ3JvdW5kLWNvbG9yOiAjRDJFMEU2OwoKCWJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGl0ZTsKfQoKLyoqIEZpeHR1cmUgKi8KCiNxdW5pdC1maXh0dXJlIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogLTEwMDAwcHg7CglsZWZ0OiAtMTAwMDBweDsKfQo=", "content_type": "text/css"}, "app/main.js": {"data": "", "content_type": "application/javascript"}, "test/qunit/tests/example.js": {"data": "dGVzdCgib25lIHRhdXRvbG9neSIsIGZ1bmN0aW9uKCkgewogIG9rKHRydWUpOwp9KTsKCm1vZHVsZSgic2ltcGxlIHRlc3RzIik7Cgp0ZXN0KCJpbmNyZW1lbnRzIiwgZnVuY3Rpb24oKSB7CiAgdmFyIG1pa2UgPSAwOwoKICBvayhtaWtlKysgPT09IDApOwogIG9rKG1pa2UgPT09IDEpOwp9KTsKCnRlc3QoImluY3JlbWVudHMgKGltcHJvdmVkKSIsIGZ1bmN0aW9uKCkgewogIHZhciBtaWtlID0gMDsKCiAgZXF1YWwobWlrZSsrLCAwKTsKICBlcXVhbChtaWtlLCAxKTsKfSk7CgoKbW9kdWxlKCJzZXRVcC90ZWFyRG93biIsIHsKICBzZXR1cDogZnVuY3Rpb24oKSB7CiAgICAvL2NvbnNvbGUubG9nKCJCZWZvcmUiKTsKICB9LAoKICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7CiAgICAvL2NvbnNvbGUubG9nKCJBZnRlciIpOwogIH0KfSk7Cgp0ZXN0KCJleGFtcGxlIiwgZnVuY3Rpb24oKSB7CiAgLy9jb25zb2xlLmxvZygiRHVyaW5nIik7Cn0pOwoKbW9kdWxlKCJhc3luYyIpOwoKdGVzdCgibXVsdGlwbGUgYXN5bmMiLCBmdW5jdGlvbigpIHsKICBleHBlY3QoMik7CgogIHN0b3AoKTsKCiAgc2V0VGltZW91dCggZnVuY3Rpb24oICkgewogICAgb2sodHJ1ZSwgImFzeW5jIG9wZXJhdGlvbiBjb21wbGV0ZWQiKTsKICAgIHN0YXJ0KCk7CiAgfSwgNTAwKTsKCiAgc3RvcCgpOwoKICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgb2sodHJ1ZSwgImFzeW5jIG9wZXJhdGlvbiBjb21wbGV0ZWQiKTsKICAgIHN0YXJ0KCk7CiAgfSwgNTAwKTsKfSk7Cg==", "content_type": "application/javascript"}, "assets/js/plugins/backbone-localstorage.js": {"data": "Ly8gQSBzaW1wbGUgbW9kdWxlIHRvIHJlcGxhY2UgYEJhY2tib25lLnN5bmNgIHdpdGggKmxvY2FsU3RvcmFnZSotYmFzZWQKLy8gcGVyc2lzdGVuY2UuIE1vZGVscyBhcmUgZ2l2ZW4gR1VJRFMsIGFuZCBzYXZlZCBpbnRvIGEgSlNPTiBvYmplY3QuIFNpbXBsZQovLyBhcyB0aGF0LgoKLy8gR2VuZXJhdGUgZm91ciByYW5kb20gaGV4IGRpZ2l0cy4KZnVuY3Rpb24gUzQoKSB7CiAgIHJldHVybiAoKCgxK01hdGgucmFuZG9tKCkpKjB4MTAwMDApfDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7Cn07CgovLyBHZW5lcmF0ZSBhIHBzZXVkby1HVUlEIGJ5IGNvbmNhdGVuYXRpbmcgcmFuZG9tIGhleGFkZWNpbWFsLgpmdW5jdGlvbiBndWlkKCkgewogICByZXR1cm4gKFM0KCkrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKStTNCgpK1M0KCkpOwp9OwoKLy8gT3VyIFN0b3JlIGlzIHJlcHJlc2VudGVkIGJ5IGEgc2luZ2xlIEpTIG9iamVjdCBpbiAqbG9jYWxTdG9yYWdlKi4gQ3JlYXRlIGl0Ci8vIHdpdGggYSBtZWFuaW5nZnVsIG5hbWUsIGxpa2UgdGhlIG5hbWUgeW91J2QgZ2l2ZSBhIHRhYmxlLgp2YXIgU3RvcmUgPSBmdW5jdGlvbihuYW1lKSB7CiAgdGhpcy5uYW1lID0gbmFtZTsKICB2YXIgc3RvcmUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLm5hbWUpOwogIHRoaXMuZGF0YSA9IChzdG9yZSAmJiBKU09OLnBhcnNlKHN0b3JlKSkgfHwge307Cn07CgpfLmV4dGVuZChTdG9yZS5wcm90b3R5cGUsIHsKCiAgLy8gU2F2ZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgKipTdG9yZSoqIHRvICpsb2NhbFN0b3JhZ2UqLgogIHNhdmU6IGZ1bmN0aW9uKCkgewogICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5uYW1lLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTsKICB9LAoKICAvLyBBZGQgYSBtb2RlbCwgZ2l2aW5nIGl0IGEgKGhvcGVmdWxseSktdW5pcXVlIEdVSUQsIGlmIGl0IGRvZXNuJ3QgYWxyZWFkeQogIC8vIGhhdmUgYW4gaWQgb2YgaXQncyBvd24uCiAgY3JlYXRlOiBmdW5jdGlvbihtb2RlbCkgewogICAgaWYgKCFtb2RlbC5pZCkgbW9kZWwuc2V0KG1vZGVsLmlkQXR0cmlidXRlLCBndWlkKCkpOwogICAgdGhpcy5kYXRhW21vZGVsLmlkXSA9IG1vZGVsOwogICAgdGhpcy5zYXZlKCk7CiAgICByZXR1cm4gbW9kZWw7CiAgfSwKCiAgLy8gVXBkYXRlIGEgbW9kZWwgYnkgcmVwbGFjaW5nIGl0cyBjb3B5IGluIGB0aGlzLmRhdGFgLgogIHVwZGF0ZTogZnVuY3Rpb24obW9kZWwpIHsKICAgIHRoaXMuZGF0YVttb2RlbC5pZF0gPSBtb2RlbDsKICAgIHRoaXMuc2F2ZSgpOwogICAgcmV0dXJuIG1vZGVsOwogIH0sCgogIC8vIFJldHJpZXZlIGEgbW9kZWwgZnJvbSBgdGhpcy5kYXRhYCBieSBpZC4KICBmaW5kOiBmdW5jdGlvbihtb2RlbCkgewogICAgcmV0dXJuIHRoaXMuZGF0YVttb2RlbC5pZF07CiAgfSwKCiAgLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBhbGwgbW9kZWxzIGN1cnJlbnRseSBpbiBzdG9yYWdlLgogIGZpbmRBbGw6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIF8udmFsdWVzKHRoaXMuZGF0YSk7CiAgfSwKCiAgLy8gRGVsZXRlIGEgbW9kZWwgZnJvbSBgdGhpcy5kYXRhYCwgcmV0dXJuaW5nIGl0LgogIGRlc3Ryb3k6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICBkZWxldGUgdGhpcy5kYXRhW21vZGVsLmlkXTsKICAgIHRoaXMuc2F2ZSgpOwogICAgcmV0dXJuIG1vZGVsOwogIH0KCn0pOwoKLy8gT3ZlcnJpZGUgYEJhY2tib25lLnN5bmNgIHRvIHVzZSBkZWxlZ2F0ZSB0byB0aGUgbW9kZWwgb3IgY29sbGVjdGlvbidzCi8vICpsb2NhbFN0b3JhZ2UqIHByb3BlcnR5LCB3aGljaCBzaG91bGQgYmUgYW4gaW5zdGFuY2Ugb2YgYFN0b3JlYC4KQmFja2JvbmUuc3luYyA9IGZ1bmN0aW9uKG1ldGhvZCwgbW9kZWwsIG9wdGlvbnMpIHsKCiAgdmFyIHJlc3A7CiAgdmFyIHN0b3JlID0gbW9kZWwubG9jYWxTdG9yYWdlIHx8IG1vZGVsLmNvbGxlY3Rpb24ubG9jYWxTdG9yYWdlOwoKICBzd2l0Y2ggKG1ldGhvZCkgewogICAgY2FzZSAicmVhZCI6ICAgIHJlc3AgPSBtb2RlbC5pZCA/IHN0b3JlLmZpbmQobW9kZWwpIDogc3RvcmUuZmluZEFsbCgpOyBicmVhazsKICAgIGNhc2UgImNyZWF0ZSI6ICByZXNwID0gc3RvcmUuY3JlYXRlKG1vZGVsKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICBjYXNlICJ1cGRhdGUiOiAgcmVzcCA9IHN0b3JlLnVwZGF0ZShtb2RlbCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgY2FzZSAiZGVsZXRlIjogIHJlc3AgPSBzdG9yZS5kZXN0cm95KG1vZGVsKTsgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICB9CgogIGlmIChyZXNwKSB7CiAgICBvcHRpb25zLnN1Y2Nlc3MocmVzcCk7CiAgfSBlbHNlIHsKICAgIG9wdGlvbnMuZXJyb3IoIlJlY29yZCBub3QgZm91bmQiKTsKICB9Cn07", "content_type": "application/javascript"}, "assets/js/libs/syncpoint-utils.js": {"data": "dmFyIEZPUk1ZID0ge307CmZ1bmN0aW9uIGZpbmRTeW5jcG9pbnRMb2NhbERiKCkgewoJdmFyIGlkID0gbnVsbDsKCXZhciBsb2NhbF9kYl9uYW1lID0gbnVsbDsKCQoJJC5nZXRKU09OKCcvc3BfYWRtaW4vX2Rlc2lnbi9jb250cm9sL192aWV3L2J5X3R5cGU/a2V5PSUyMmluc3RhbGxhdGlvbiUyMicsIGZ1bmN0aW9uKGRhdGEpIHsgCgkJdmFyIHJlY29yZCA9IG51bGw7CgkJJC5lYWNoKGRhdGEsIGZ1bmN0aW9uKGtleSwgdmFsKSB7CgkJCWlmIChrZXkgPT0gInJvd3MiKSB7CgkJCQlyZWNvcmQgPSB2YWw7CgkJCQlpZCA9IHJlY29yZFswXS5pZDsKCQkJfQoJCX0pOwoJCWlmIChyZWNvcmQgIT0gbnVsbCkgewoJCQkvL2NvbnNvbGUubG9nKCJyZWNvcmQ6ICIgKyBKU09OLnN0cmluZ2lmeShyZWNvcmQpKTsKCQkJY29uc29sZS5sb2coImlkOiAiICsgaWQpOwoJCQkkLmdldEpTT04oJy9zcF9hZG1pbi8nICsgaWQsIGZ1bmN0aW9uKGRhdGEpIHsKCQkJCS8vY29uc29sZS5sb2coImRhdGE6ICIgKyBKU09OLnN0cmluZ2lmeShkYXRhKSk7CgkJCQlsb2NhbF9kYl9uYW1lID0gZGF0YS5sb2NhbF9kYl9uYW1lOwoJCQkJRk9STVkuU3luY3BvaW50TG9jYWxEYiA9IGxvY2FsX2RiX25hbWU7CgkJCQljb25zb2xlLmxvZygibG9jYWxfZGJfbmFtZTogIiArIEZPUk1ZLlN5bmNwb2ludExvY2FsRGIpOwoJCQl9KTsKCQl9Cgl9KTsKfQ==", "content_type": "application/javascript"}, "assets/js/libs/jquery.couch.js": {"data": "", "content_type": "application/javascript"}, "app/templates/example.html": {"data": "", "content_type": "text/html"}, "app/modules/todo.js": {"data": "", "content_type": "application/javascript"}, "app/templates/todos.html": {"data": "ICAgICAgPGRpdiBjbGFzcz0idG9kbyA8JT0gZG9uZSA/ICdkb25lJyA6ICcnICU+Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkaXNwbGF5Ij4KICAgICAgICAgIDxpbnB1dCBjbGFzcz0iY2hlY2siIHR5cGU9ImNoZWNrYm94IiA8JT0gZG9uZSA/ICdjaGVja2VkPSJjaGVja2VkIicgOiAnJyAlPiAvPgogICAgICAgICAgPGRpdiBjbGFzcz0idG9kby1jb250ZW50Ij48JT0gY29udGVudCAlPjwvZGl2PgogICAgICAgICAgPHNwYW4gY2xhc3M9InRvZG8tZGVzdHJveSI+PC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImVkaXQiPgogICAgICAgICAgPGlucHV0IGNsYXNzPSJ0b2RvLWlucHV0IiB0eXBlPSJ0ZXh0IiB2YWx1ZT0iPCU9IGNvbnRlbnQgJT4iIC8+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2Pgo=", "content_type": "text/html"}, "assets/js/libs/require.js": {"data": "", "content_type": "application/javascript"}, "assets/js/plugins/use.js": {"data": "KGZ1bmN0aW9uKCkgewoKdmFyIGJ1aWxkTWFwID0ge307CgovKiBSZXF1aXJlSlMgVXNlIFBsdWdpbiB2MC4xLjAKICogQ29weXJpZ2h0IDIwMTIsIFRpbSBCcmFueWVuIChAdGJyYW55ZW4pCiAqIHVzZS5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICovCmRlZmluZSh7CiAgdmVyc2lvbjogIjAuMi4wIiwKCiAgLy8gSW52b2tlZCBieSB0aGUgQU1EIGJ1aWxkZXIsIHBhc3NlZCB0aGUgcGF0aCB0byByZXNvbHZlLCB0aGUgcmVxdWlyZQogIC8vIGZ1bmN0aW9uLCBkb25lIGNhbGxiYWNrLCBhbmQgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy4KICAvLwogIC8vIENvbmZpZ3VyYXRpb24gZm9ybWF0CiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAvLwogIC8vIFRoZSBzdHJpbmcgcHJvcGVydHkgdXNlZCBpbiBhdHRhY2ggd2lsbCByZXNvbHZlIHRvIHdpbmRvd1tzdHJpbmdQcm9wXQogIC8vIEZ1bmN0aW9ucyBhcmUgZXZhbHVhdGVkIGluIHRoZSBzY29wZSBvZiB0aGUgd2luZG93IGFuZCBwYXNzZWQgYWxsCiAgLy8gYXJndW1lbnRzLgogIC8vCiAgLy8gcmVxdWlyZS5jb25maWcoewogIC8vICAgdXNlOiB7CiAgLy8gICAgICJsaWJzL3VuZGVyc2NvcmUiOiB7CiAgLy8gICAgICAgYXR0YWNoOiAiXyIKICAvLyAgICAgfSwKICAvLyAgCiAgLy8gICAgICJsaWJzL2JhY2tib25lIjogewogIC8vICAgICAgIGRlcHM6IFsidXNlIXVuZGVyc2NvcmUiLCAianF1ZXJ5Il0sCiAgLy8gICAgICAgYXR0YWNoOiBmdW5jdGlvbihfLCAkKSB7CiAgLy8gICAgICAgICByZXR1cm4gdGhpcy5CYWNrYm9uZS5ub0NvbmZsaWN0KCk7CiAgLy8gICAgICAgfQogIC8vICAgICB9CiAgLy8gICB9CiAgLy8gfSk7CiAgLy8KICBsb2FkOiBmdW5jdGlvbihuYW1lLCByZXEsIGxvYWQsIGNvbmZpZykgewogICAgdmFyIG1vZHVsZSA9IGNvbmZpZy51c2UgJiYgY29uZmlnLnVzZVtuYW1lXTsKCiAgICAvLyBObyBtb2R1bGUgdG8gbG9hZCBzbyByZXR1cm4gZWFybHkuCiAgICBpZiAoIW1vZHVsZSkgewogICAgICByZXR1cm4gbG9hZCgpOwogICAgfQoKICAgIC8vIEF0dGFjaCB0byB0aGUgYnVpbGQgbWFwIGZvciB1c2UgaW4gdGhlIHdyaXRlIG1ldGhvZCBiZWxvdy4KICAgIGJ1aWxkTWFwW25hbWVdID0geyBkZXBzOiBtb2R1bGUuZGVwcyB8fCBbXSwgYXR0YWNoOiBtb2R1bGUuYXR0YWNoIH07CgogICAgLy8gUmVhZCB0aGUgY3VycmVudCBtb2R1bGUgY29uZmlndXJhdGlvbiBmb3IgYW55IGRlcGVuZGVuY2llcyB0aGF0IGFyZQogICAgLy8gcmVxdWlyZWQgdG8gcnVuIHRoaXMgcGFydGljdWxhciBub24tQU1EIG1vZHVsZS4KICAgIHJlcShtb2R1bGUuZGVwcyB8fCBbXSwgZnVuY3Rpb24oKSB7CiAgICAgIC8vIFJlcXVpcmUgdGhpcyBtb2R1bGUKICAgICAgcmVxKFtuYW1lXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gQXR0YWNoIHByb3BlcnR5CiAgICAgICAgYXR0YWNoID0gbW9kdWxlLmF0dGFjaDsKCiAgICAgICAgLy8gSWYgZG9pbmcgYSBidWlsZCBkb24ndCBjYXJlIGFib3V0IGxvYWRpbmcKICAgICAgICBpZiAoY29uZmlnLmlzQnVpbGQpIHsgCiAgICAgICAgICByZXR1cm4gbG9hZCgpOwogICAgICAgIH0KCiAgICAgICAgLy8gUmV0dXJuIHRoZSBjb3JyZWN0IGF0dGFjaGVkIG9iamVjdAogICAgICAgIGlmICh0eXBlb2YgYXR0YWNoID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgIHJldHVybiBsb2FkKGF0dGFjaC5hcHBseSh3aW5kb3csIGFyZ3VtZW50cykpOwogICAgICAgIH0KCiAgICAgICAgLy8gVXNlIHdpbmRvdyBmb3Igbm93IChtYXliZSB0aGlzPykKICAgICAgICByZXR1cm4gbG9hZCh3aW5kb3dbYXR0YWNoXSk7CiAgICAgIH0pOwogICAgfSk7CiAgfSwKCiAgd3JpdGU6IGZ1bmN0aW9uKHBsdWdpbk5hbWUsIG1vZHVsZU5hbWUsIHdyaXRlKSB7CiAgICB2YXIgbW9kdWxlID0gYnVpbGRNYXBbbW9kdWxlTmFtZV07CiAgICB2YXIgbm9ybWFsaXplID0geyBhdHRhY2g6IG51bGwsIGRlcHM6ICIiIH07CgogICAgLy8gTm9ybWFsaXplIHRoZSBhdHRhY2ggdG8gd2luZG93W25hbWVdIG9yIGZ1bmN0aW9uKCkgeyB9CiAgICBpZiAodHlwZW9mIGF0dGFjaCA9PSAiZnVuY3Rpb24iKSB7CiAgICAgIG5vcm1hbGl6ZS5hdHRhY2ggPSAicmV0dXJuICIgKyBtb2R1bGUuYXR0YWNoLnRvU3RyaW5nKCkgKyAiOyI7CiAgICB9IGVsc2UgewogICAgICBub3JtYWxpemUuYXR0YWNoID0gInJldHVybiB3aW5kb3dbJyIgKyBtb2R1bGUuYXR0YWNoICsgIiddOyI7CiAgICB9CgogICAgLy8gTm9ybWFsaXplIHRoZSBkZXBlbmRlbmNpZXMgdG8gaGF2ZSBwcm9wZXIgc3RyaW5nIGNoYXJhY3RlcnMKICAgIGlmIChtb2R1bGUuZGVwcy5sZW5ndGgpIHsKICAgICAgbm9ybWFsaXplLmRlcHMgPSAiJyIgKyBtb2R1bGUuZGVwcy50b1N0cmluZygpLnNwbGl0KCIsIikuam9pbigiJywnIikgKyAiJyI7CiAgICB9CgogICAgLy8gV3JpdGUgb3V0IHRoZSBhY3R1YWwgZGVmaW5pdGlvbgogICAgd3JpdGUoWwogICAgICAiZGVmaW5lKCciLCBwbHVnaW5OYW1lLCAiISIsIG1vZHVsZU5hbWUsICInLCAiLAogICAgICAgICJbIiwgbm9ybWFsaXplLmRlcHMsICJdLCIsCgogICAgICAgICJmdW5jdGlvbigpIHsiLAogICAgICAgICAgbm9ybWFsaXplLmF0dGFjaCwKICAgICAgICAifSIsCgogICAgICAiKTtcbiIKICAgIF0uam9pbigiIikpOwogIH0KfSk7Cgp9KSgpOwo=", "content_type": "application/javascript"}, "readme.md": {"data": "QmFja2JvbmUgQm9pbGVycGxhdGUKPT09PT09PT09PT09PT09PT09PT0KClRoaXMgYm9pbGVycGxhdGUgaXMgdGhlIHByb2R1Y3Qgb2YgbXVjaCByZXNlYXJjaCBhbmQgZnJ1c3RyYXRpb24uICBFeGlzdGluZwpib2lsZXJwbGF0ZXMgZnJlZWx5IG1vZGlmeSBCYWNrYm9uZSBjb3JlLCBsYWNrIGEgYnVpbGQgcHJvY2VzcywgYW5kIGFyZQp2ZXJ5IHByZXNjcmlwdGl2ZTsgdGhpcyBib2lsZXJwbGF0ZSBjaGFuZ2VzIHRoYXQuCgpPcmdhbml6ZSB5b3VyIGFwcGxpY2F0aW9uIGluIGEgbG9naWNhbCBmaWxlc3lzdGVtLCBkZXZlbG9wIHlvdXIKTW9kZWxzL0NvbGxlY3Rpb25zL1ZpZXdzL1JvdXRlcnMgaW5zaWRlIG1vZHVsZXMsIGFuZCBidWlsZCBrbm93aW5nIHlvdSBoYXZlCmVmZmljaWVudCBjb2RlIHRoYXQgd2lsbCBub3QgYm90dGxlbmVjayB5b3VyIHVzZXJzLgoKVGhhbmtzIHRvIG91cgpbQ29udHJpYnV0b3JzXShodHRwczovL2dpdGh1Yi5jb20vdGJyYW55ZW4vYmFja2JvbmUtYm9pbGVycGxhdGUvY29udHJpYnV0b3JzKSEKClNwZWNpYWwgVGhhbmtzIHRvOiBbY293Ym95XShodHRwOi8vZ2l0aHViLmNvbS9jb3dib3kpLApbaXJvc10oaHR0cDovL2dpdGh1Yi5jb20vaXJvcyksIFtuaW1idXBhbmldKGh0dHA6Ly9naXRodWIuY29tL25pbWJ1cGFuaSksClt3b29raWVoYW5nb3Zlcl0oaHR0cDovL2dpdGh1Yi5jb20vd29va2llaGFuZ292ZXIpLCBhbmQKW2p1Z2dsaW5taWtlXShodHRwOi8vZ2l0aHViLmNvbS9qdWdnbGlubWlrZSkKCiMjIERvY3VtZW50YXRpb24gIyMKClZpZXcgdGhlIEJhY2tib25lIEJvaWxlcnBsYXRlIGRvY3VtZW50YXRpb24gaGVyZToKCltHaXRIdWIgV2lraV0oaHR0cHM6Ly9naXRodWIuY29tL3RicmFueWVuL2JhY2tib25lLWJvaWxlcnBsYXRlL3dpa2kpCgojIyBCdWlsZCBwcm9jZXNzICMjCgpUbyB1c2UgdGhlIG5ldyBhbmQgaW1wcm92ZWQgYnVpbGQgcHJvY2VzcywgcGxlYXNlIHZpc2l0IHRoZSAKW2dydW50LWJiYl0oaHR0cHM6Ly9naXRodWIuY29tL2JhY2tib25lLWJvaWxlcnBsYXRlL2dydW50LWJiYikKcGx1Z2luIHJlcG8gYW5kIGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIHRvIGluc3RhbGwuICBCYXNpbmcgeW91ciBwcm9qZWN0IG9mZgp0aGlzIHJlcG8gd2lsbCBhbGxvdyB0aGUgYGJiYmAgY29tbWFuZHMgdG8gd29yayBvdXQtb2YtdGhlLWJveC4K", "content_type": ""}, "assets/js/libs/underscore.js": {"data": "", "content_type": "application/javascript"}, "assets/css/index.css": {"data": "QGltcG9ydCAic3R5bGUuY3NzIjsK", "content_type": "text/css"}, "test/jasmine/spec/example.js": {"data": "ZGVzY3JpYmUoIm9uZSB0YXV0b2xvZ3kiLCBmdW5jdGlvbigpIHsKICBpdCgiaXMgYSB0YXV0b2xvZ3kiLCBmdW5jdGlvbigpIHsKICAgIGV4cGVjdCh0cnVlKS50b0JlVHJ1dGh5KCk7CiAgfSk7CgogIGRlc2NyaWJlKCJpcyBhd2Vzb21lIiwgZnVuY3Rpb24oKSB7CiAgICBpdCgiaXMgYXdlc29tZSIsIGZ1bmN0aW9uKCkgewogICAgICBleHBlY3QoMSkudG9CZSgxKTsKICAgIH0pOwogIH0pOwp9KTsKCmRlc2NyaWJlKCJzaW1wbGUgdGVzdHMiLCBmdW5jdGlvbigpIHsKICBpdCgiaW5jcmVtZW50cyIsIGZ1bmN0aW9uKCkgewogICAgdmFyIG1pa2UgPSAwOwoKICAgIGV4cGVjdChtaWtlKysgPT09IDApLnRvQmVUcnV0aHkoKTsKICAgIGV4cGVjdChtaWtlID09PSAxKS50b0JlVHJ1dGh5KCk7CiAgfSk7CgogIGl0KCJpbmNyZW1lbnRzIChpbXByb3ZlZCkiLCBmdW5jdGlvbigpIHsKICAgIHZhciBtaWtlID0gMDsKCiAgICBleHBlY3QobWlrZSsrKS50b0JlKDApOwogICAgZXhwZWN0KG1pa2UpLnRvQmUoMSk7CiAgfSk7Cn0pOwoKZGVzY3JpYmUoInNldFVwL3RlYXJEb3duIiwgZnVuY3Rpb24oKSB7CiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHsKICAgIGNvbnNvbGUubG9nKCJCZWZvcmUiKTsKICB9KTsKCiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uKCkgewogICAgY29uc29sZS5sb2coIkFmdGVyIik7CiAgfSk7CgogIGl0KCJleGFtcGxlIiwgZnVuY3Rpb24oKSB7CiAgICBjb25zb2xlLmxvZygiRHVyaW5nIik7CiAgfSk7CgogIGRlc2NyaWJlKCJzZXRVcC90ZWFyRG93biIsIGZ1bmN0aW9uKCkgewogICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHsKICAgICAgY29uc29sZS5sb2coIkJlZm9yZTIiKTsKICAgIH0pOwoKICAgIGFmdGVyRWFjaChmdW5jdGlvbigpIHsKICAgICAgY29uc29sZS5sb2coIkFmdGVyMiIpOwogICAgfSk7CgogICAgaXQoImV4YW1wbGUiLCBmdW5jdGlvbigpIHsKICAgICAgY29uc29sZS5sb2coIkR1cmluZyBOZXN0ZWQiKTsKICAgIH0pOwogIH0pOwp9KTsKCmRlc2NyaWJlKCJhc3luYyIsIGZ1bmN0aW9uKCkgewogIGl0KCJtdWx0aXBsZSBhc3luYyIsIGZ1bmN0aW9uKCkgewogICAgdmFyIHNlbWFwaG9yZSA9IDI7CgogICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgZXhwZWN0KHRydWUpLnRvQmVUcnV0aHkoKTsKICAgICAgc2VtYXBob3JlLS07CiAgICB9LCA1MDApOwoKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIGV4cGVjdCh0cnVlKS50b0JlVHJ1dGh5KCk7CiAgICAgIHNlbWFwaG9yZS0tOwogICAgfSwgNTAwKTsKCiAgICB3YWl0c0ZvcihmdW5jdGlvbigpIHsgcmV0dXJuIHNlbWFwaG9yZSA9PT0gMCB9KTsKICB9KTsKfSk7Cg==", "content_type": "application/javascript"}, "index.html": {"data": "PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSxjaHJvbWU9MSI+CiAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiPgoKICA8dGl0bGU+VG9kb01WQyB3aXRoIEJhY2tib25lIEJvaWxlcnBsYXRlPC90aXRsZT4KCiAgPCEtLSBBcHBsaWNhdGlvbiBzdHlsZXMgLS0+CjwhLS0gICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImFzc2V0cy9jc3MvdG9kb3MuY3NzIj4gLS0+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJhc3NldHMvY3NzL2luZGV4LmNzcyI+CjwvaGVhZD4KCjxib2R5PgogIDwhLS0gTWFpbiBjb250YWluZXIgLS0+CiAgPGRpdiByb2xlPSJtYWluIiBpZD0ibWFpbiI+PC9kaXY+CgogIDwhLS0gQXBwbGljYXRpb24gc291cmNlIC0tPgogIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBjaGFyc2V0PSJ1dGYtOCIgc3JjPSJhc3NldHMvanMvbGlicy9jb3Jkb3ZhLTIuMC4wLmpzIj48L3NjcmlwdD4KICA8IS0tIDxzY3JpcHQgc3JjPSJodHRwOi8vMTkyLjE2OC4xNi4xMTA6ODA4MS90YXJnZXQvdGFyZ2V0LXNjcmlwdC1taW4uanMjYW5vbnltb3VzIj48L3NjcmlwdD4gIC0tPgogIDxzY3JpcHQgZGF0YS1tYWluPSJhcHAvY29uZmlnLmpzIiBzcmM9ImFzc2V0cy9qcy9saWJzL3JlcXVpcmUuanMiPjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K", "content_type": "text/html"}, "test/jasmine/vendor/MIT.LICENSE": {"data": "Q29weXJpZ2h0IChjKSAyMDA4LTIwMTEgUGl2b3RhbCBMYWJzCgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcKYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCiJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLApkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8KcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvCnRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlCmluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsCkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgpNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORApOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFCkxJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04KT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OCldJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgo=", "content_type": ""}, "assets/js/libs/backbone-couchdb.js": {"data": "", "content_type": "application/javascript"}, "test/jasmine/vendor/jasmine_favicon.png": {"data": "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAuBJREFUOMulkktIVGEYht//nP+cGU9z8zgXS6JUtMjxkpeMMosi0loEQS2E7gRF0KZNixbRphsVBQUtoiKiC0VR0T0No9IaLZkyR8dyxjKdGtMZz+jonP9vURNSuIie1fvB9718N4JfTE63T1+/qWZ3e1uH5/69uotabGQQAAyylDK/omzFtKzMAgKu64mx+NUrt09qseEIxpPvzq187WvU2j69jR07se9Gbs60IomK0tZt6/Z6PzRFggNd/NNggF+/c9Frs5qcyTqaFIXFBfPSnE4jlSRhzYZ1K6dnZ2Xfunr99radO7bbXelmxhhEUYTf19EWjWr9fxmMxkc1zhnhADhjKKuY786YmuE2WyzgnIMQgthQNPH0ybMHOuOJZJ2QFLWP66/V3rlfLxACQggAQDGZwcEBAJwzNDe+7HjV4KkbP7qYFLHYSLT93fu3s4vzl9lU1cYwhveRJ/gYbYJFdiIW1kApNRSVFJamWk2uYKDbPzwS134bOB3q1IoF5cuLSormyZJkYVRHJNGLltBDWI0OZLoKoTochty8WZmVSxYuHY1pcsMLzyNqMilqVfXimrWb124pLCvJNxhTCGMMBAQZJA85qT2YYprxcwwAeiIB2WDEkuqlVefPXjoqzikrWL5rz66DxXPLs4hICeccgiCA6ToEXUK2vRQyU9D/NcRlg0wopRAEAmWSYvU2NbeKfX3fAm88zR6HXc1yuZzpnDES6u0d+ODzRWypqsmQooBSimBnZ+j4/iMHGp83NLW2eN+1tnhb/O2dbSS5gzTV6spzzyxXlBSl62Ow010wq/LwqWOHqCQTQRDQ5feHVlWtrvzyJeQbf4XffxDuH+yrr2+8mYzNFrNNGxqK29Q0IwiBruucAAR/IGACgoHu9s+B7h6RUuiJMdTefXAvHP4e+DOPTmTwLTzQ42l49VK1p9kunD535vzZy0fio2PD+BdKS/IXV1cv2kjIxJ3+Nz8AZ9spJvY2PKEAAAAASUVORK5CYII=", "content_type": "image/png"}, "assets/css/destroy.png": {"data": "iVBORw0KGgoAAAANSUhEUgAAABQAAAAoCAYAAAD+MdrbAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAc1JREFUeNrMVsFKw0AQTWIR+gdCrwUFQZSEgv5CQRAEwYPgKfdCC4JHvRTsR3gTAoLQn5AEvSgKxZwEv6EQ0jdlLJtld5OYFfrgHTqbebubmcyrG8exo8AGeAyegtvgPsdfwU8wAp/ATE5sKcRI4B7sKdZ85jn4DF7wBit4UsIAfNGIyejxswOd4Bi8A9tOdbQ5ZywLnoFD5+8YssZScJN3aYob0vK4kh3VE77vV4oxuqRFgn2TmCigiknou+jDD26VyqdJkkQnmNIJt3SrqkSDGKHjOXYxJ8Ef3WrNohC+STApE6Nrilc1iCYkODW9P1FIFZMwpSpTY79xHzVBCu7QCefgtYWCXP0WhfAAThqITVijMG1GfNJ5nTbhnJFqfNH0vQX3eHiWgZ454JzMNLFpAh+BJzw4ujylHW6xlK/3qLSAMAx1J8iEhEy65uq37Enr5ylBENj3FIja9xSILj3FxYdOn96XzgZqYAbuGj2FNqwYK/cUIdEtiRU8xROaVkYuCbmaNRGHRk/RJObr4yk1i2L2FMU7yyuI6j1FEMhLYgVP8fjf6MxCUWisRVY9BaPMnqdA7H88paXwlMgwYGVPucTJ3ssmdiNPWQgwAJAGndsKbcIpAAAAAElFTkSuQmCC", "content_type": "image/png"}, "test/qunit/vendor/qunit.js": {"data": "", "content_type": "application/javascript"}, "assets/js/plugins/localstorage.js": {"data": "ZGVmaW5lKFsndW5kZXJzY29yZScsICdiYWNrYm9uZSddLCBmdW5jdGlvbihfLCBCYWNrYm9uZSl7CgovLyBBIHNpbXBsZSBtb2R1bGUgdG8gcmVwbGFjZSBgQmFja2JvbmUuc3luY2Agd2l0aCAqbG9jYWxTdG9yYWdlKi1iYXNlZAovLyBwZXJzaXN0ZW5jZS4gTW9kZWxzIGFyZSBnaXZlbiBHVUlEUywgYW5kIHNhdmVkIGludG8gYSBKU09OIG9iamVjdC4gU2ltcGxlCi8vIGFzIHRoYXQuCgovLyBHZW5lcmF0ZSBmb3VyIHJhbmRvbSBoZXggZGlnaXRzLgpmdW5jdGlvbiBTNCgpIHsKICAgcmV0dXJuICgoKDErTWF0aC5yYW5kb20oKSkqMHgxMDAwMCl8MCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTsKfTsKCi8vIEdlbmVyYXRlIGEgcHNldWRvLUdVSUQgYnkgY29uY2F0ZW5hdGluZyByYW5kb20gaGV4YWRlY2ltYWwuCmZ1bmN0aW9uIGd1aWQoKSB7CiAgIHJldHVybiAoUzQoKStTNCgpKyItIitTNCgpKyItIitTNCgpKyItIitTNCgpKyItIitTNCgpK1M0KCkrUzQoKSk7Cn07CgovLyBPdXIgU3RvcmUgaXMgcmVwcmVzZW50ZWQgYnkgYSBzaW5nbGUgSlMgb2JqZWN0IGluICpsb2NhbFN0b3JhZ2UqLiBDcmVhdGUgaXQKLy8gd2l0aCBhIG1lYW5pbmdmdWwgbmFtZSwgbGlrZSB0aGUgbmFtZSB5b3UnZCBnaXZlIGEgdGFibGUuCnZhciBTdG9yZSA9IGZ1bmN0aW9uKG5hbWUpIHsKICB0aGlzLm5hbWUgPSBuYW1lOwogIHZhciBzdG9yZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMubmFtZSk7CiAgdGhpcy5kYXRhID0gKHN0b3JlICYmIEpTT04ucGFyc2Uoc3RvcmUpKSB8fCB7fTsKfTsKCl8uZXh0ZW5kKFN0b3JlLnByb3RvdHlwZSwgewoKICAvLyBTYXZlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSAqKlN0b3JlKiogdG8gKmxvY2FsU3RvcmFnZSouCiAgc2F2ZTogZnVuY3Rpb24oKSB7CiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLm5hbWUsIEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpOwogIH0sCgogIC8vIEFkZCBhIG1vZGVsLCBnaXZpbmcgaXQgYSAoaG9wZWZ1bGx5KS11bmlxdWUgR1VJRCwgaWYgaXQgZG9lc24ndCBhbHJlYWR5CiAgLy8gaGF2ZSBhbiBpZCBvZiBpdCdzIG93bi4KICBjcmVhdGU6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICBpZiAoIW1vZGVsLmlkKSBtb2RlbC5pZCA9IG1vZGVsLmF0dHJpYnV0ZXMuaWQgPSBndWlkKCk7CiAgICB0aGlzLmRhdGFbbW9kZWwuaWRdID0gbW9kZWw7CiAgICB0aGlzLnNhdmUoKTsKICAgIHJldHVybiBtb2RlbDsKICB9LAoKICAvLyBVcGRhdGUgYSBtb2RlbCBieSByZXBsYWNpbmcgaXRzIGNvcHkgaW4gYHRoaXMuZGF0YWAuCiAgdXBkYXRlOiBmdW5jdGlvbihtb2RlbCkgewogICAgdGhpcy5kYXRhW21vZGVsLmlkXSA9IG1vZGVsOwogICAgdGhpcy5zYXZlKCk7CiAgICByZXR1cm4gbW9kZWw7CiAgfSwKCiAgLy8gUmV0cmlldmUgYSBtb2RlbCBmcm9tIGB0aGlzLmRhdGFgIGJ5IGlkLgogIGZpbmQ6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICByZXR1cm4gdGhpcy5kYXRhW21vZGVsLmlkXTsKICB9LAoKICAvLyBSZXR1cm4gdGhlIGFycmF5IG9mIGFsbCBtb2RlbHMgY3VycmVudGx5IGluIHN0b3JhZ2UuCiAgZmluZEFsbDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gXy52YWx1ZXModGhpcy5kYXRhKTsKICB9LAoKICAvLyBEZWxldGUgYSBtb2RlbCBmcm9tIGB0aGlzLmRhdGFgLCByZXR1cm5pbmcgaXQuCiAgZGVzdHJveTogZnVuY3Rpb24obW9kZWwpIHsKICAgIGRlbGV0ZSB0aGlzLmRhdGFbbW9kZWwuaWRdOwogICAgdGhpcy5zYXZlKCk7CiAgICByZXR1cm4gbW9kZWw7CiAgfQoKfSk7CgovLyBPdmVycmlkZSBgQmFja2JvbmUuc3luY2AgdG8gdXNlIGRlbGVnYXRlIHRvIHRoZSBtb2RlbCBvciBjb2xsZWN0aW9uJ3MKLy8gKmxvY2FsU3RvcmFnZSogcHJvcGVydHksIHdoaWNoIHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBgU3RvcmVgLgpCYWNrYm9uZS5zeW5jID0gZnVuY3Rpb24obWV0aG9kLCBtb2RlbCwgb3B0aW9ucykgewoKICB2YXIgcmVzcDsKICB2YXIgc3RvcmUgPSBtb2RlbC5sb2NhbFN0b3JhZ2UgfHwgbW9kZWwuY29sbGVjdGlvbi5sb2NhbFN0b3JhZ2U7CgogIHN3aXRjaCAobWV0aG9kKSB7CiAgICBjYXNlICJyZWFkIjogICAgcmVzcCA9IG1vZGVsLmlkID8gc3RvcmUuZmluZChtb2RlbCkgOiBzdG9yZS5maW5kQWxsKCk7IGJyZWFrOwogICAgY2FzZSAiY3JlYXRlIjogIHJlc3AgPSBzdG9yZS5jcmVhdGUobW9kZWwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgIGNhc2UgInVwZGF0ZSI6ICByZXNwID0gc3RvcmUudXBkYXRlKG1vZGVsKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICBjYXNlICJkZWxldGUiOiAgcmVzcCA9IHN0b3JlLmRlc3Ryb3kobW9kZWwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogIH0KCiAgaWYgKHJlc3ApIHsKICAgIG9wdGlvbnMuc3VjY2VzcyhyZXNwKTsKICB9IGVsc2UgewogICAgb3B0aW9ucy5lcnJvcigiUmVjb3JkIG5vdCBmb3VuZCIpOwogIH0KfTsKcmV0dXJuIFN0b3JlOwp9KTsK", "content_type": "application/javascript"}, "assets/js/libs/cordova-2.0.0.js": {"data": "", "content_type": "application/javascript"}, "test/jasmine/index.html": {"data": "PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSxjaHJvbWU9MSI+CiAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiPgoKICA8dGl0bGU+QmFja2JvbmUgQm9pbGVycGxhdGUgSmFzbWluZSBUZXN0IFN1aXRlPC90aXRsZT4KCiAgPCEtLSBKYXNtaW5lIHN0eWxlcyAtLT4KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9InZlbmRvci9qYXNtaW5lLmNzcyI+CjwvaGVhZD4KCjxib2R5PgogIDwhLS0gVGVzdGluZyBsaWJzIC0tPgogIDxzY3JpcHQgc3JjPSJ2ZW5kb3IvamFzbWluZS5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9InZlbmRvci9qYXNtaW5lLWh0bWwuanMiPjwvc2NyaXB0PgoKICA8IS0tIEFwcGxpY2F0aW9uIGxpYnMgLS0+CiAgPHNjcmlwdCBzcmM9Ii4uLy4uL2Fzc2V0cy9qcy9saWJzL2pxdWVyeS5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9Ii4uLy4uL2Fzc2V0cy9qcy9saWJzL3VuZGVyc2NvcmUuanMiPjwvc2NyaXB0PgogIDxzY3JpcHQgc3JjPSIuLi8uLi9hc3NldHMvanMvbGlicy9iYWNrYm9uZS5qcyI+PC9zY3JpcHQ+CiAgCiAgPCEtLSBMb2FkIGFwcGxpY2F0aW9uIC0tPgogIDxzY3JpcHQgZGF0YS1tYWluPSIuLi8uLi9hcHAvY29uZmlnIgogICAgc3JjPSIuLi8uLi9hc3NldHMvanMvbGlicy9yZXF1aXJlLmpzIj48L3NjcmlwdD4KCiAgPCEtLSBEZWNsYXJlIHlvdXIgc3BlYyBmaWxlcyB0byBiZSBydW4gaGVyZSAtLT4KICA8c2NyaXB0PgogICAgLy8gRW5zdXJlIHlvdSBwb2ludCB0byB3aGVyZSB5b3VyIHNwZWMgZm9sZGVyIGlzLCBiYXNlIGRpcmVjdG9yeSBpcyBhcHAvLAogICAgLy8gd2hpY2ggaXMgd2h5IC4uL3Rlc3QgaXMgbmVjZXNzYXJ5CiAgICByZXF1aXJlKHsgcGF0aHM6IHsgc3BlYzogIi4uL3Rlc3QvamFzbWluZS9zcGVjIiB9IH0sIFsKCiAgICAgIC8vIExvYWQgdGhlIGV4YW1wbGUgc3BlYywgcmVwbGFjZSB0aGlzIGFuZCBhZGQgeW91ciBvd24gc3BlYwogICAgICAic3BlYy9leGFtcGxlIgoKICAgIF0sIGZ1bmN0aW9uKCkgewogICAgICAvLyBTZXQgdXAgdGhlIGphc21pbmUgcmVwb3J0ZXJzIG9uY2UgZWFjaCBzcGVjIGhhcyBiZWVuIGxvYWRlZAogICAgICBqYXNtaW5lLmdldEVudigpLmFkZFJlcG9ydGVyKG5ldyBqYXNtaW5lLlRyaXZpYWxSZXBvcnRlcigpKTsKICAgICAgamFzbWluZS5nZXRFbnYoKS5leGVjdXRlKCk7CiAgICB9KTsKICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+Cg==", "content_type": "text/html"}}, "file": "watch( '.html$') {|match_data|\n  `couchapp push dev` unless match_data[0] =~ /\\.sw.$/\n}\nwatch( '.js$') {|match_data|\n  `couchapp push dev` unless match_data[0] =~ /\\.sw.$/\n}\nwatch( '.*\\.json$') {|match_data|\n  `couchapp push dev` unless match_data[0] =~ /\\.sw.$/\n}\nwatch( '.*\\.css$') {|match_data|\n  `couchapp push dev` unless match_data[0] =~ /\\.sw.$/\n}\nwatch( '(.*\\.coffee$)' ) {|match_data|\n  puts match_data[0]\n  result = `coffee --bare --compile #{match_data[0]} 2>&1`\n  error = false\n  result.each{|line|\n    if line.match(/In /)  then\n      error = true\n      puts line\n#      `mplayer -really-quiet \"/usr/share/evolution/2.30/sounds/default_alarm.wav\"`\n#      `notify-send \"#{line}\" -i /usr/share/icons/Humanity/status/128/dialog-warning.svg &`\n    end\n  }\n  if not error\n    puts \"Success!\"\n#    `make combined`\n    `couchapp push dev`\n  end\n}", "language": "javascript", "views": {"byItemSorted": {"map": "function(doc) {\n  if (doc.formId === \"item\") {\n    emit([doc.lastModified], doc);\n  }\n};"}, "byCollection": {"map": "function(doc) {\n  if (doc.collection) {\n\t  emit(doc.collection, doc);\n  }\n}"}}, "README": "## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.\n\nOther useful info\n-----------------\n\nIt's a pain to run 'couchapp push' everytime you make a change. Mike wrote a little [watchr](http://rubygems.org/gems/watchr) script that watches for changes to any relevant files and then automatically pushes them into your couch. To get it you need to install rubygems and watchr:\n\n    apt-get install rubygems\n    gem install watchr\n    \nTo run it, just \n\n\twatchr file.watchr", "_id": "_design/couchabb", "couchapp": {"manifest": ["couchapp.json", "file.watchr", "language", "README.md", "views/", "views/byCollection/", "views/byCollection/map.js", "views/byItemSorted/", "views/byItemSorted/map.js"], "signatures": {"test/qunit/index.html": "c4cb7ed76306960cbedf7ebcc2dbef77", "assets/css/style.css": "60e50f3092163c547b8492dbedc37949", "test/jasmine/vendor/jasmine-html.js": "42f01b8b707c08688b674e24b6468691", "app/modules/item.js": "1e7f2ce54e07bbc04bca0d7683b473fb", "assets/js/plugins/text.js": "b32b7d40ae64e551068f618a8b0b4cb6", "app/config.js": "b778e655fbed76d1a76f4b836423bd91", "app/templates/todomvc.html": "f108c2056a890d66d1363430f89a781b", "assets/js/libs/backbone-full.js": "e9f62de436c1c7e751b187dcd672d810", "test/jasmine/vendor/jasmine.js": "13679aa81688216e85c59e80cec1f087", "grunt.js": "1838a7d52afd8fa7ca09474604c0fcc3", "assets/img/backbone.png": "39533ea5bc6b7836b4dfc910154489f2", "favicon.ico": "6e23fd7b2e8105ccdbbcafe31c2bafdd", "app/templates/stats.html": "fa92dd04fcda65bc22862f35f43b7974", "assets/js/libs/almond.js": "3bd7933372f11d686b32d4022eadb6bb", "test/jasmine/vendor/jasmine.css": "c49709e9712cc01b60362d0bb5bab8a4", "assets/js/libs/backbone.js": "a959af924d21c7b788fe197caf03fc40", "app/namespace.js": "f11a748c6c75cba9ee1fa4f56193e25c", "app/modules/example.js": "c6c0f939e5a5cf19edf060a65cb2a71f", "assets/js/libs/jquery.js": "273e017fd0bef143258516bdee173a1e", "assets/css/todos.css": "2de0a33e64bed96a8787c37efda3ba69", "test/qunit/vendor/qunit.css": "7d50545791ad767f21581e23cf8b89b4", "app/main.js": "0d55473eb0cdf4fefb5ff9313efc3953", "test/qunit/tests/example.js": "e82d0cdf3c1c464173d0c599e77f9806", "assets/js/plugins/backbone-localstorage.js": "97c31c30c0be27426e59492aeadbe6ab", "assets/js/libs/syncpoint-utils.js": "dc46e909a7a818071c1ac1dd6be6a8dc", "assets/js/libs/jquery.couch.js": "1ed75a8aca42bf3d437535bb51618f99", "app/templates/example.html": "c99625bcaf807146c27aa91a27a4ad6b", "app/modules/todo.js": "adf96265a218b602b11061cc3a310d1b", "app/templates/todos.html": "c1814dc095c3b817e70165daf095e07c", "assets/js/libs/require.js": "5d8ec2c595f444741f9ff284639b05f2", "assets/js/plugins/use.js": "323e93b5244a4d84865b0b8ba42fecd3", "readme.md": "e2fb3cfb9bd59e312508fe9758704569", "assets/js/libs/underscore.js": "4eb64db36175fefa3e36b9e57606512c", "assets/css/index.css": "1fa33d7faa0214a53b43c247d2461cb9", "test/jasmine/spec/example.js": "5c75a52ebb391e2ac2dad9ff46913c01", "index.html": "3f6bf9557c1ad8b633b40776e8b78295", "test/jasmine/vendor/MIT.LICENSE": "ee4bc64f30f3e9d1aed570562d8713e7", "assets/js/libs/backbone-couchdb.js": "8564a176d1555f4692f4f6dde073c13c", "test/jasmine/vendor/jasmine_favicon.png": "a165833061487789d9d008cc57571c25", "assets/css/destroy.png": "a4023351c1c0ad044d39139bca216cf9", "test/qunit/vendor/qunit.js": "e1e6023d3111b009393951e2433837b6", "assets/js/plugins/localstorage.js": "8429caa4bf756718afa7cd4aa842a3e5", "assets/js/libs/cordova-2.0.0.js": "5c8aaa2ba56d706f6c0ebf38f3b48ea6", "test/jasmine/index.html": "143ca8560675ded3974172535e6ca18d"}, "name": "Name of your CouchApp", "objects": {}, "description": "CouchApp"}}
